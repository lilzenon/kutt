{{> header}}

<link rel="stylesheet" href="/css/drop-edit.css">

<div class="drop-edit-container">
    <div class="drop-edit-header">
        <div class="header-content">
            <button type="button" class="back-button" onclick="window.history.back()">
                {{> icons/arrow_left}}
                <span>Back</span>
            </button>
            <h1>Edit Drop</h1>
        </div>
    </div>

    <div class="drop-edit-content">
        <div class="drop-edit-form-container">
            <!-- MODERN TAB NAVIGATION -->
            <div class="tab-navigation">
                <div class="tab-nav-container">
                    <button type="button" class="tab-btn active" data-tab="page">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                        </svg>
                        <span>Page</span>
                    </button>
                    <button type="button" class="tab-btn" data-tab="messaging">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4A2,2 0 0,0 20,2M20,16H6L4,18V4H20V16Z"/>
                        </svg>
                        <span>Messaging</span>
                    </button>
                    <button type="button" class="tab-btn" data-tab="advanced">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.22,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.22,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.68 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z"/>
                        </svg>
                        <span>Advanced</span>
                    </button>
                    <button type="button" class="tab-btn" data-tab="analytics">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M22,21H2V3H4V19H6V17H10V19H12V16H16V19H18V17H22V21M16,8H18V15H16V8M12,2H14V15H12V2M8,13H10V15H8V13M4,8H6V15H4V8Z"/>
                        </svg>
                        <span>Analytics</span>
                    </button>
                    <button type="button" class="tab-btn" data-tab="sharing">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M18,16.08C17.24,16.08 16.56,16.38 16.04,16.85L8.91,12.7C8.96,12.47 9,12.24 9,12C9,11.76 8.96,11.53 8.91,11.3L15.96,7.19C16.5,7.69 17.21,8 18,8A3,3 0 0,0 21,5A3,3 0 0,0 18,2A3,3 0 0,0 15,5C15,5.24 15.04,5.47 15.09,5.7L8.04,9.81C7.5,9.31 6.79,9 6,9A3,3 0 0,0 3,12A3,3 0 0,0 6,15C6.79,15 7.5,14.69 8.04,14.19L15.16,18.34C15.11,18.55 15.08,18.77 15.08,19C15.08,20.61 16.39,21.91 18,21.91C19.61,21.91 20.92,20.61 20.92,19A2.92,2.92 0 0,0 18,16.08Z"/>
                        </svg>
                        <span>Sharing</span>
                    </button>
                </div>
            </div>

            <form id="drop-edit-form" class="drop-form">
                <!-- PAGE TAB CONTENT -->
                <div class="tab-content active" data-tab-content="page">
                    <!-- Details Section -->
                    <div class="form-section">
                        <div class="section-header">
                            <h2>Details</h2>
                            <p class="section-description">Configure the basic information for your drop page</p>
                        </div>

                        <div class="form-group">
                            <label for="edit-title">Title *</label>
                            <input type="text" id="edit-title" name="title" required maxlength="255"
                                   value="{{drop.title}}" placeholder="Enter drop title">
                        </div>

                        <div class="form-group">
                            <label for="edit-description">Description</label>
                            <textarea id="edit-description" name="description" rows="4"
                                      placeholder="Describe what this drop is about">{{drop.description}}</textarea>
                        </div>

                        <div class="form-group">
                            <label for="edit-slug">URL Slug</label>
                            <div class="slug-input-wrapper">
                                <span class="slug-prefix">{{domain}}/drop/</span>
                                <input type="text" id="edit-slug" name="slug" maxlength="100"
                                       value="{{drop.slug}}" placeholder="my-drop">
                            </div>
                            <small class="form-help">This will be your drop's public URL</small>
                        </div>

                        <div class="form-group">
                            <label for="edit-button-text">Button Text</label>
                            <input type="text" id="edit-button-text" name="button_text" maxlength="50"
                                   value="{{drop.button_text}}" placeholder="Get Notified">
                        </div>

                        <div class="form-group">
                            <label for="edit-cover-image">Cover Image URL</label>
                            <input type="url" id="edit-cover-image" name="cover_image"
                                   value="{{drop.cover_image}}" placeholder="https://example.com/image.jpg">
                            <small class="form-help">Optional: Add a cover image for your drop</small>
                        </div>
                    </div>

                    <!-- Styling Section -->
                    <div class="form-section">
                        <div class="section-header">
                            <h2>Styling</h2>
                            <p class="section-description">Customize the visual appearance of your drop page</p>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="edit-background-color">Background Color</label>
                                <input type="color" id="edit-background-color" name="background_color"
                                       value="{{drop.background_color}}">
                            </div>

                            <div class="form-group">
                                <label for="edit-card-color">Card Color</label>
                                <input type="color" id="edit-card-color" name="card_color"
                                       value="{{drop.card_color}}">
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="edit-title-color">Title Text Color</label>
                                <input type="color" id="edit-title-color" name="title_color"
                                       value="{{drop.title_color}}">
                            </div>

                            <div class="form-group">
                                <label for="edit-description-color">Description Text Color</label>
                                <input type="color" id="edit-description-color" name="description_color"
                                       value="{{drop.description_color}}">
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="edit-button-color">Button Color</label>
                                <input type="color" id="edit-button-color" name="button_color"
                                       value="{{drop.button_color}}">
                            </div>

                            <div class="form-group">
                                <label for="edit-form-field-color">Form Field Color</label>
                                <input type="color" id="edit-form-field-color" name="form_field_color"
                                       value="{{drop.form_field_color}}">
                            </div>
                        </div>
                    </div>

                    <!-- Platform Links Section -->
                    <div class="form-section">
                        <div class="section-header">
                            <h2>Platform Links</h2>
                            <p class="section-description">Add links to your other platforms and social media</p>
                        </div>

                        <div class="platform-links-container">
                            <div class="form-group">
                                <label for="edit-website-link">Website</label>
                                <input type="url" id="edit-website-link" name="website_link"
                                       placeholder="https://yourwebsite.com">
                            </div>

                            <div class="form-group">
                                <label for="edit-instagram-link">Instagram</label>
                                <input type="url" id="edit-instagram-link" name="instagram_link"
                                       placeholder="https://instagram.com/yourusername">
                            </div>

                            <div class="form-group">
                                <label for="edit-twitter-link">Twitter/X</label>
                                <input type="url" id="edit-twitter-link" name="twitter_link"
                                       placeholder="https://twitter.com/yourusername">
                            </div>

                            <div class="form-group">
                                <label for="edit-youtube-link">YouTube</label>
                                <input type="url" id="edit-youtube-link" name="youtube_link"
                                       placeholder="https://youtube.com/@yourusername">
                            </div>

                            <div class="form-group">
                                <label for="edit-spotify-link">Spotify</label>
                                <input type="url" id="edit-spotify-link" name="spotify_link"
                                       placeholder="https://open.spotify.com/artist/...">
                            </div>

                            <div class="form-group">
                                <label for="edit-tiktok-link">TikTok</label>
                                <input type="url" id="edit-tiktok-link" name="tiktok_link"
                                       placeholder="https://tiktok.com/@yourusername">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- MESSAGING TAB CONTENT -->
                <div class="tab-content" data-tab-content="messaging">
                    <div class="tab-placeholder">
                        <div class="placeholder-content">
                            <svg width="48" height="48" viewBox="0 0 24 24" fill="currentColor" class="placeholder-icon">
                                <path d="M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4A2,2 0 0,0 20,2M20,16H6L4,18V4H20V16Z"/>
                            </svg>
                            <h3>Messaging</h3>
                            <p>Configure email templates, SMS messages, and notification settings.</p>
                            <span class="coming-soon-badge">Coming Soon</span>
                        </div>
                    </div>
                </div>

                <!-- ADVANCED TAB CONTENT -->
                <div class="tab-content" data-tab-content="advanced">
                    <!-- Visibility & Access Control -->
                    <div class="form-section">
                        <div class="section-header">
                            <h2>Visibility & Access Control</h2>
                            <p class="section-description">Control who can access your drop and when it's live</p>
                        </div>

                        <div class="form-group">
                            <div class="setting-group">
                                <div class="setting-header">
                                    <div class="checkbox-group">
                                        <label class="checkbox-label">
                                            <input type="checkbox" name="is_active" {{#if drop.is_active}}checked{{/if}}>
                                            <span class="checkbox-custom"></span>
                                            <span class="checkbox-text">Active Drop</span>
                                        </label>
                                    </div>
                                    <div class="setting-status">
                                        <span class="status-indicator {{#if drop.is_active}}active{{else}}inactive{{/if}}">
                                            {{#if drop.is_active}}Live{{else}}Draft{{/if}}
                                        </span>
                                    </div>
                                </div>
                                <div class="setting-description">
                                    <p>When active, your drop is publicly accessible and accepts signups. When inactive, the drop URL will show a "Drop Inactive" page and block all signups.</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Data Collection -->
                    <div class="form-section">
                        <div class="section-header">
                            <h2>Data Collection</h2>
                            <p class="section-description">Configure what information to collect from users</p>
                        </div>

                        <div class="form-group">
                            <div class="checkbox-group">
                                <label class="checkbox-label">
                                    <input type="checkbox" name="collect_email" {{#if drop.collect_email}}checked{{/if}}>
                                    <span class="checkbox-custom"></span>
                                    <span class="checkbox-text">Collect email addresses</span>
                                </label>
                            </div>
                            <small class="form-help">Required for sending notifications when the drop goes live</small>
                        </div>

                        <div class="form-group">
                            <div class="checkbox-group">
                                <label class="checkbox-label">
                                    <input type="checkbox" name="collect_phone" {{#if drop.collect_phone}}checked{{/if}}>
                                    <span class="checkbox-custom"></span>
                                    <span class="checkbox-text">Collect phone numbers</span>
                                </label>
                            </div>
                            <small class="form-help">Optional: Collect phone numbers for SMS notifications</small>
                        </div>
                    </div>

                    <!-- Messages -->
                    <div class="form-section">
                        <div class="section-header">
                            <h2>Messages</h2>
                            <p class="section-description">Customize messages shown to users</p>
                        </div>

                        <div class="form-group">
                            <label for="edit-thank-you-message">Thank You Message</label>
                            <textarea id="edit-thank-you-message" name="thank_you_message" rows="3"
                                      placeholder="Thank you for signing up! You'll be notified when this drop goes live.">{{drop.thank_you_message}}</textarea>
                            <small class="form-help">Message shown after successful signup</small>
                        </div>
                    </div>
                </div>

                <!-- ANALYTICS TAB CONTENT -->
                <div class="tab-content" data-tab-content="analytics">
                    <div class="tab-placeholder">
                        <div class="placeholder-content">
                            <svg width="48" height="48" viewBox="0 0 24 24" fill="currentColor" class="placeholder-icon">
                                <path d="M22,21H2V3H4V19H6V17H10V19H12V16H16V19H18V17H22V21M16,8H18V15H16V8M12,2H14V15H12V2M8,13H10V15H8V13M4,8H6V15H4V8Z"/>
                            </svg>
                            <h3>Analytics</h3>
                            <p>View detailed insights, conversion rates, and performance metrics for your drop.</p>
                            <span class="coming-soon-badge">Coming Soon</span>
                        </div>
                    </div>
                </div>

                <!-- SHARING TAB CONTENT -->
                <div class="tab-content" data-tab-content="sharing">
                    <div class="tab-placeholder">
                        <div class="placeholder-content">
                            <svg width="48" height="48" viewBox="0 0 24 24" fill="currentColor" class="placeholder-icon">
                                <path d="M18,16.08C17.24,16.08 16.56,16.38 16.04,16.85L8.91,12.7C8.96,12.47 9,12.24 9,12C9,11.76 8.96,11.53 8.91,11.3L15.96,7.19C16.5,7.69 17.21,8 18,8A3,3 0 0,0 21,5A3,3 0 0,0 18,2A3,3 0 0,0 15,5C15,5.24 15.04,5.47 15.09,5.7L8.04,9.81C7.5,9.31 6.79,9 6,9A3,3 0 0,0 3,12A3,3 0 0,0 6,15C6.79,15 7.5,14.69 8.04,14.19L15.16,18.34C15.11,18.55 15.08,18.77 15.08,19C15.08,20.61 16.39,21.91 18,21.91C19.61,21.91 20.92,20.61 20.92,19A2.92,2.92 0 0,0 18,16.08Z"/>
                            </svg>
                            <h3>Sharing</h3>
                            <p>Configure social sharing, embed codes, and promotional tools.</p>
                            <span class="coming-soon-badge">Coming Soon</span>
                        </div>
                    </div>
                </div>

                <!-- Actions -->
                <div class="form-actions">
                    <button type="button" class="button secondary" onclick="window.history.back()">
                        Cancel
                    </button>
                    <button type="submit" class="button primary">
                        <span class="button-text">Save Changes</span>
                        <span class="button-spinner" style="display: none;">
                            {{> icons/spinner}}
                        </span>
                    </button>
                </div>
            </form>
        </div>

        <!-- Enhanced Preview Panel -->
        <div class="drop-preview-panel">
            <!-- Mobile Toggle Button (hidden on desktop) -->
            <button type="button" class="preview-toggle" onclick="togglePreview()">
                <span>Live Preview</span>
                <div class="preview-toggle-actions">
                    <a href="/drop/{{drop.slug}}" target="_blank" class="preview-quick-link" title="Open in new tab">
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M14,3V5H17.59L7.76,14.83L9.17,16.24L19,6.41V10H21V3M19,19H5V5H12V3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19Z"/>
                        </svg>
                    </a>
                    <svg class="preview-toggle-icon" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M7 10l5 5 5-5z"/>
                    </svg>
                </div>
            </button>

            <div class="preview-collapsible">
                <div class="preview-header">
                    <div class="preview-title-section">
                        <h3>Live Preview</h3>
                        <span class="preview-device-indicator" id="device-indicator">Desktop View</span>
                    </div>
                    <div class="preview-controls">
                        <button type="button" class="preview-device-btn active" data-device="desktop" title="Desktop View">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M21 2H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h7l-2 3v1h8v-1l-2-3h7c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 12H3V4h18v10z"/>
                            </svg>
                        </button>
                        <button type="button" class="preview-device-btn" data-device="mobile" title="Mobile View">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M17 2H7c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM7 4h10v14H7V4z"/>
                            </svg>
                        </button>
                    </div>
                </div>

            <div class="preview-container">
                <div class="preview-viewport" id="preview-viewport">
                    <div class="drop-page-wrapper">
                        <div class="drop-container" id="drop-preview">
                        <!-- Header -->
                        <header class="drop-header">
                            <div class="drop-brand">
                                <a href="/" class="brand-link">
                                    <img src="/images/logo.png" alt="BOUNCE2BOUNCE" class="brand-logo">
                                    <span class="brand-text" id="preview-brand-text">BOUNCE2BOUNCE</span>
                                </a>
                            </div>
                        </header>

                        <!-- Main Content -->
                        <main class="drop-main">
                            <div class="drop-content">
                                <div class="drop-cover-image" id="preview-cover" style="display: none;">
                                    <img id="preview-cover-image" src="" alt="Cover" loading="lazy">
                                </div>

                                <div class="drop-info">
                                    <h1 class="drop-title" id="preview-title">{{drop.title}}</h1>

                                    <div class="drop-description">
                                        <p id="preview-description">{{drop.description}}</p>
                                    </div>

                                    <div class="drop-stats">
                                        <span class="signup-count" id="preview-signup-count">42 people signed up</span>
                                    </div>
                                </div>

                                <!-- Signup Form -->
                                <div class="drop-signup-section">
                                    <form class="signup-form">
                                        <div class="form-group">
                                            <input type="email" placeholder="Enter your email" readonly class="form-input preview-input">
                                        </div>
                                        <div class="form-group">
                                            <input type="text" placeholder="Your name (optional)" readonly class="form-input preview-input">
                                        </div>
                                        <button type="button" class="signup-button" id="preview-button">
                                            <span class="button-text" id="preview-button-text">{{drop.button_text}}</span>
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </main>

                        <!-- Footer -->
                        <footer class="drop-footer">
                            <p>Powered by <a href="/" class="footer-link">BOUNCE2BOUNCE</a></p>
                        </footer>
                        </div>
                    </div>
                </div>
            </div>

                <div class="preview-info-panel">
                    <div class="preview-url">
                        <label>Preview URL:</label>
                        <div class="url-display">
                            <span class="url-prefix">{{domain}}/drop/</span>
                            <span class="url-slug" id="preview-url-slug">{{drop.slug}}</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
</div>

<div id="edit-error" class="error-message" style="display: none;"></div>
<div id="edit-success" class="success-message" style="display: none;"></div>

{{> footer}}

<!-- Modular Systems -->
<link rel="stylesheet" href="/css/drop-shared.css">
<script src="/js/drop-color-system.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('drop-edit-form');
    const dropId = '{{drop.id}}';

    // Enhanced real-time preview updates
    const titleInput = document.getElementById('edit-title');
    const descriptionInput = document.getElementById('edit-description');
    const slugInput = document.getElementById('edit-slug');
    const buttonTextInput = document.getElementById('edit-button-text');
    const buttonColorInput = document.getElementById('edit-button-color');
    const backgroundColorInput = document.getElementById('edit-background-color');
    const cardColorInput = document.getElementById('edit-card-color');
    const titleColorInput = document.getElementById('edit-title-color');
    const descriptionColorInput = document.getElementById('edit-description-color');
    const formFieldColorInput = document.getElementById('edit-form-field-color');
    const coverImageInput = document.getElementById('edit-cover-image');

    const previewDrop = document.getElementById('drop-preview');
    const previewTitle = document.getElementById('preview-title');
    const previewDescription = document.getElementById('preview-description');
    const previewButton = document.getElementById('preview-button');
    const previewButtonText = document.getElementById('preview-button-text');
    const previewUrlSlug = document.getElementById('preview-url-slug');
    const previewCover = document.getElementById('preview-cover');
    const previewCoverImage = document.getElementById('preview-cover-image');
    const previewViewport = document.getElementById('preview-viewport');

    // BULLETPROOF INITIALIZATION with error handling
    function initializePreview() {
        try {
            console.log('🚀 Initializing preview system...');

            // Initialize colors first
            updatePreviewColors();

            // Then initialize content
            updatePreviewContent();

            // Verify all elements are properly initialized
            const requiredElements = [previewTitle, previewDescription, previewButton, previewButtonText];
            const missingElements = requiredElements.filter(el => !el);

            if (missingElements.length > 0) {
                console.warn('⚠️ Some preview elements are missing:', missingElements);
            } else {
                console.log('✅ All preview elements initialized successfully');
            }

            // Force initial repaint
            const previewContainer = previewDrop.closest('.preview-viewport') || previewDrop;
            previewContainer.style.display = 'none';
            previewContainer.offsetHeight; // Trigger reflow
            previewContainer.style.display = '';

            console.log('🎨 Preview initialization complete');

        } catch (error) {
            console.error('❌ Error initializing preview:', error);
            // Fallback: try again after a short delay
            setTimeout(() => {
                console.log('🔄 Retrying preview initialization...');
                updatePreviewColors();
                updatePreviewContent();
            }, 500);
        }
    }

    // BULLETPROOF CSS CUSTOM PROPERTIES SYSTEM
    // Based on MDN best practices and research findings
    function updatePreviewColors() {
        const backgroundColor = backgroundColorInput.value || '#ffffff';
        const cardColor = cardColorInput.value || '#ffffff';
        const titleColor = titleColorInput.value || '#000000';
        const descriptionColor = descriptionColorInput.value || '#666666';
        const buttonColor = buttonColorInput.value || '#007bff';
        const formFieldColor = formFieldColorInput.value || '#ffffff';

        console.log('🎨 Updating preview colors:', { backgroundColor, cardColor, titleColor, descriptionColor, buttonColor, formFieldColor });

        // RESEARCH-BASED APPROACH: Apply CSS custom properties to :root for maximum inheritance
        // This ensures variables cascade properly to all child elements
        const documentRoot = document.documentElement;

        // Set CSS variables with preview-specific prefixes to avoid conflicts
        documentRoot.style.setProperty('--preview-drop-background-color', backgroundColor);
        documentRoot.style.setProperty('--preview-drop-card-color', cardColor);
        documentRoot.style.setProperty('--preview-drop-title-color', titleColor);
        documentRoot.style.setProperty('--preview-drop-description-color', descriptionColor);
        documentRoot.style.setProperty('--preview-drop-button-color', buttonColor);
        documentRoot.style.setProperty('--preview-drop-form-field-color', formFieldColor);

        // Calculate and set button text color with intelligent contrast
        const buttonTextColor = getContrastColor(buttonColor);
        documentRoot.style.setProperty('--preview-drop-button-text-color', buttonTextColor);

        // ALSO apply to preview container as fallback for better scope control
        const previewContainer = previewDrop.closest('.preview-viewport') || previewDrop;
        previewContainer.style.setProperty('--drop-background-color', backgroundColor);
        previewContainer.style.setProperty('--drop-card-color', cardColor);
        previewContainer.style.setProperty('--drop-title-color', titleColor);
        previewContainer.style.setProperty('--drop-description-color', descriptionColor);
        previewContainer.style.setProperty('--drop-button-color', buttonColor);
        previewContainer.style.setProperty('--drop-button-text-color', buttonTextColor);
        previewContainer.style.setProperty('--drop-form-field-color', formFieldColor);

        console.log('✅ Applied CSS variables to both :root and preview container for maximum compatibility');

        // Force a repaint to ensure changes are applied immediately
        previewContainer.style.display = 'none';
        previewContainer.offsetHeight; // Trigger reflow
        previewContainer.style.display = '';

        console.log('🔄 Forced repaint for immediate visual update');
    }

    // Update preview content
    function updatePreviewContent() {
        previewTitle.textContent = titleInput.value || 'Drop Title';
        previewDescription.textContent = descriptionInput.value || 'Drop description';
        previewButtonText.textContent = buttonTextInput.value || 'Get Notified';
        previewUrlSlug.textContent = slugInput.value || 'drop-slug';

        // Handle cover image
        const coverImageUrl = coverImageInput.value;
        if (coverImageUrl && isValidUrl(coverImageUrl)) {
            previewCoverImage.src = coverImageUrl;
            previewCover.style.display = 'block';
        } else {
            previewCover.style.display = 'none';
        }
    }

    // Calculate contrast color for text on colored backgrounds
    function getContrastColor(hexColor) {
        // Remove # if present
        const color = hexColor.replace('#', '');

        // Convert to RGB
        const r = parseInt(color.substr(0, 2), 16);
        const g = parseInt(color.substr(2, 2), 16);
        const b = parseInt(color.substr(4, 2), 16);

        // Calculate luminance
        const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;

        // Return white for dark colors, black for light colors
        return luminance > 0.5 ? '#000000' : '#ffffff';
    }

    // Validate URL
    function isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }

    // BULLETPROOF EVENT LISTENERS with debouncing for performance
    // Debounce function to prevent excessive updates
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Debounced update functions for better performance
    const debouncedUpdateColors = debounce(updatePreviewColors, 100);
    const debouncedUpdateContent = debounce(updatePreviewContent, 100);

    // Content update listeners
    titleInput.addEventListener('input', debouncedUpdateContent);
    descriptionInput.addEventListener('input', debouncedUpdateContent);
    slugInput.addEventListener('input', debouncedUpdateContent);
    buttonTextInput.addEventListener('input', debouncedUpdateContent);
    coverImageInput.addEventListener('input', debouncedUpdateContent);

    // Color update listeners with immediate feedback
    buttonColorInput.addEventListener('input', updatePreviewColors);
    backgroundColorInput.addEventListener('input', updatePreviewColors);
    cardColorInput.addEventListener('input', updatePreviewColors);
    titleColorInput.addEventListener('input', updatePreviewColors);
    descriptionColorInput.addEventListener('input', updatePreviewColors);
    formFieldColorInput.addEventListener('input', updatePreviewColors);

    // Also add 'change' event listeners for better compatibility
    buttonColorInput.addEventListener('change', updatePreviewColors);
    backgroundColorInput.addEventListener('change', updatePreviewColors);
    cardColorInput.addEventListener('change', updatePreviewColors);
    titleColorInput.addEventListener('change', updatePreviewColors);
    descriptionColorInput.addEventListener('change', updatePreviewColors);
    formFieldColorInput.addEventListener('change', updatePreviewColors);

    // FIXED: Device preview toggle with manual override support
    const deviceButtons = document.querySelectorAll('.preview-device-btn');
    let manualDeviceSelection = false; // Track if user manually selected a device

    deviceButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            deviceButtons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');

            const device = btn.dataset.device;
            manualDeviceSelection = true; // User made manual selection
            updateDevicePreview(device);

            console.log(`Manual device selection: ${device}`);
        });
    });

    // Function to update device preview to match real experience
    function updateDevicePreview(device) {
        // Simply update the viewport class - let CSS handle everything else
        previewViewport.className = `preview-viewport ${device}`;

        // Update device indicator
        const deviceIndicator = document.getElementById('device-indicator');
        if (deviceIndicator) {
            deviceIndicator.textContent = device === 'mobile' ? 'Mobile View' : 'Desktop View';
        }

        // Let the shared CSS system handle all styling automatically
        // No manual JavaScript overrides - CSS variables and media queries handle everything
        console.log(`Updated device preview to: ${device}`);
    }

    // FIXED: Always show mobile preview (better fit for preview window)
    function detectAndSetInitialDevicePreview() {
        // ALWAYS default to mobile since it fits better in the preview window
        const defaultDevice = 'mobile';

        // Set the mobile device button as active
        deviceButtons.forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.device === defaultDevice) {
                btn.classList.add('active');
            }
        });

        // Update preview to mobile view
        updateDevicePreview(defaultDevice);

        console.log(`Preview set to mobile view for better fit in preview window`);
    }

    // MODERN TAB SYSTEM - Inspired by Laylo's design patterns
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    // Tab switching functionality
    function switchTab(targetTab) {
        // Remove active class from all tabs and contents
        tabButtons.forEach(btn => btn.classList.remove('active'));
        tabContents.forEach(content => content.classList.remove('active'));

        // Add active class to selected tab and content
        const activeButton = document.querySelector(`[data-tab="${targetTab}"]`);
        const activeContent = document.querySelector(`[data-tab-content="${targetTab}"]`);

        if (activeButton && activeContent) {
            activeButton.classList.add('active');
            activeContent.classList.add('active');

            console.log(`Switched to tab: ${targetTab}`);
        }
    }

    // Add click listeners to tab buttons
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetTab = button.dataset.tab;
            switchTab(targetTab);
        });
    });

    // Initialize with first tab active (Page)
    switchTab('page');

    // Initialize preview
    initializePreview();

    // FIXED: Set device preview based on user's actual device (ONLY on page load)
    detectAndSetInitialDevicePreview();

    // FIXED: Keep preview mobile-focused (no auto-switching)
    window.addEventListener('resize', () => {
        // Keep preview mobile-focused for better fit in preview window
        // Users can manually switch if they want desktop view
        console.log('Window resized - keeping mobile preview for better fit');
    });

    // Mobile preview toggle functionality
    window.togglePreview = function() {
        const toggle = document.querySelector('.preview-toggle');
        const collapsible = document.querySelector('.preview-collapsible');
        const icon = document.querySelector('.preview-toggle-icon');

        if (collapsible.classList.contains('collapsed')) {
            collapsible.classList.remove('collapsed');
            toggle.classList.remove('collapsed');
        } else {
            collapsible.classList.add('collapsed');
            toggle.classList.add('collapsed');
        }
    };

    // Auto-collapse preview on mobile by default
    if (window.innerWidth <= 768) {
        const toggle = document.querySelector('.preview-toggle');
        const collapsible = document.querySelector('.preview-collapsible');

        if (toggle && collapsible) {
            collapsible.classList.add('collapsed');
            toggle.classList.add('collapsed');
        }
    }

    // Form submission
    form.addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());

        // Convert checkboxes to booleans
        data.is_active = formData.has('is_active');
        data.collect_email = formData.has('collect_email');
        data.collect_phone = formData.has('collect_phone');

        const submitBtn = this.querySelector('button[type="submit"]');
        const buttonText = submitBtn.querySelector('.button-text');
        const buttonSpinner = submitBtn.querySelector('.button-spinner');

        // Show loading state
        submitBtn.disabled = true;
        buttonText.style.display = 'none';
        buttonSpinner.style.display = 'inline-flex';

        try {
            const response = await fetch(`/api/drops/${dropId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (response.ok) {
                showSuccessBanner('Drop updated successfully!');
                // Update the drop data in memory if needed
                if (result.data) {
                    // Update any displayed data with the latest from server
                    console.log('Drop updated:', result.data);
                }
            } else {
                showErrorBanner(result.message || 'Failed to update drop');
            }
        } catch (error) {
            showErrorBanner('Network error. Please try again.');
        } finally {
            submitBtn.disabled = false;
            buttonText.style.display = 'inline';
            buttonSpinner.style.display = 'none';
        }
    });

    function showError(message) {
        const errorDiv = document.getElementById('edit-error');
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
        setTimeout(() => errorDiv.style.display = 'none', 5000);
    }

    function showSuccess(message) {
        const successDiv = document.getElementById('edit-success');
        successDiv.textContent = message;
        successDiv.style.display = 'block';
        setTimeout(() => successDiv.style.display = 'none', 5000);
    }

    // Enhanced banner functions for better UX
    function showSuccessBanner(message) {
        createBanner(message, 'success');
    }

    function showErrorBanner(message) {
        createBanner(message, 'error');
    }

    function createBanner(message, type) {
        // Remove any existing banners
        const existingBanners = document.querySelectorAll('.notification-banner');
        existingBanners.forEach(banner => banner.remove());

        // Create new banner
        const banner = document.createElement('div');
        banner.className = `notification-banner ${type}`;
        banner.innerHTML = `
            <div class="banner-content">
                <div class="banner-icon">
                    ${type === 'success' ? '✅' : '❌'}
                </div>
                <div class="banner-message">${message}</div>
                <button class="banner-close" onclick="this.parentElement.parentElement.remove()">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                    </svg>
                </button>
            </div>
        `;

        // Add to page
        document.body.appendChild(banner);

        // Animate in
        setTimeout(() => banner.classList.add('show'), 100);

        // Auto-remove after 5 seconds
        setTimeout(() => {
            banner.classList.remove('show');
            setTimeout(() => banner.remove(), 300);
        }, 5000);
    }
});
</script>
