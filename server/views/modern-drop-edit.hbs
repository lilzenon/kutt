<!-- Modern Drop Edit Page -->
<div class="space-y-6">
    <!-- Header with Back Button -->
    <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
            <button type="button" onclick="navigateBack()" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                <svg class="-ml-0.5 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Back
            </button>
            <div>
                <h1 class="text-2xl font-bold text-gray-900">Edit Drop</h1>
                <p class="text-sm text-gray-500">{{drop.title}}</p>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="flex items-center space-x-3">
            <a href="/drop/{{drop.slug}}" target="_blank" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                <svg class="-ml-0.5 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                </svg>
                View Live
            </a>

            <div class="flex items-center">
                <span class="text-sm text-gray-500 mr-2">Status:</span>
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium {{#if drop.is_active}}bg-green-100 text-green-800{{else}}bg-gray-100 text-gray-800{{/if}}">
                    {{#if drop.is_active}}Active{{else}}Inactive{{/if}}
                </span>
            </div>
        </div>
    </div>

    <!-- Main Content Grid -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Form Section (2/3 width on desktop) -->
        <div class="lg:col-span-2">
            <!-- Tab Navigation -->
            <div class="bg-white shadow rounded-lg overflow-hidden">
                <div class="border-b border-gray-200">
                    <nav class="-mb-px flex space-x-8 px-6" aria-label="Tabs">
                        <button type="button" class="tab-btn border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm active" data-tab="page">
                            <div class="flex items-center">
                                <svg class="mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                </svg>
                                Page
                            </div>
                        </button>

                        <button type="button" class="tab-btn border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm" data-tab="messaging">
                            <div class="flex items-center">
                                <svg class="mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                                </svg>
                                Messaging
                            </div>
                        </button>

                        <button type="button" class="tab-btn border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm" data-tab="advanced">
                            <div class="flex items-center">
                                <svg class="mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                </svg>
                                Advanced
                            </div>
                        </button>

                        <button type="button" class="tab-btn border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm" data-tab="sharing">
                            <div class="flex items-center">
                                <svg class="mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                                </svg>
                                Sharing
                            </div>
                        </button>

                        <button type="button" class="tab-btn border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm" data-tab="analytics">
                            <div class="flex items-center">
                                <svg class="mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2-2V7a2 2 0 012-2h2a2 2 0 002 2v2a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 00-2 2h-2a2 2 0 00-2 2v6a2 2 0 01-2 2H9z" />
                                </svg>
                                Analytics
                            </div>
                        </button>
                    </nav>
                </div>

                <!-- Form Content -->
                <form id="drop-edit-form" class="drop-form">
                    <!-- PAGE TAB CONTENT -->
                    <div class="tab-content active" data-tab-content="page">
                        <div class="home-settings-form">
                            <div class="home-settings-grid">
                                <!-- Basic Information Section -->
                                <div class="form-section">
                                    <h4>Basic Information</h4>

                                    <div class="form-group">
                                        <label for="edit-title">Title *</label>
                                        <input type="text" id="edit-title" name="title" required maxlength="255" value="{{drop.title}}" placeholder="Enter drop title" class="form-input">
                                        {{#if errors.title}}<p class="error">{{errors.title}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-subtitle">Subtitle</label>
                                        <input type="text" id="edit-subtitle" name="subtitle" maxlength="500" value="{{drop.subtitle}}" placeholder="Optional subtitle text (appears below main title)" class="form-input">
                                        <small class="form-help">Appears directly underneath the main title with smaller, lighter styling</small>
                                        {{#if errors.subtitle}}<p class="error">{{errors.subtitle}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-description">Description</label>
                                        <textarea id="edit-description" name="description" rows="4" placeholder="Describe what this drop is about" class="form-input">{{drop.description}}</textarea>
                                        {{#if errors.description}}<p class="error">{{errors.description}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-slug">URL Slug</label>
                                        <div class="slug-input-wrapper">
                                            <span class="slug-prefix">{{domain}}/drop/</span>
                                            <input type="text" id="edit-slug" name="slug" value="{{drop.slug}}" placeholder="my-drop" class="form-input">
                                        </div>
                                        <small class="form-help">This will be your drop's public URL</small>
                                        {{#if errors.slug}}<p class="error">{{errors.slug}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-button-text">Button Text</label>
                                        <input type="text" id="edit-button-text" name="button_text" maxlength="50" value="{{drop.button_text}}" placeholder="Get Notified" class="form-input">
                                        {{#if errors.button_text}}<p class="error">{{errors.button_text}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-artist-name">Artist Name</label>
                                        <input type="text" id="edit-artist-name" name="artist_name" maxlength="100" value="{{drop.artist_name}}" placeholder="Performing artist or creator name" class="form-input">
                                        <small class="form-help">The name of the performing artist or event creator</small>
                                        {{#if errors.artist_name}}<p class="error">{{errors.artist_name}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-event-date">Event Date & Time</label>
                                        <input type="datetime-local" id="edit-event-date" name="event_date" value="{{#if drop.event_date}}{{formatDateForInput drop.event_date}}{{/if}}" class="form-input">
                                        <small class="form-help">When the event or drop will occur</small>
                                        {{#if errors.event_date}}<p class="error">{{errors.event_date}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-event-address">Event Address</label>
                                        <input type="text" id="edit-event-address" name="event_address" maxlength="200" value="{{drop.event_address}}" placeholder="Venue address or location" class="form-input">
                                        <small class="form-help">Physical location or venue address for the event</small>
                                        {{#if errors.event_address}}<p class="error">{{errors.event_address}}</p>{{/if}}
                                    </div>
                                </div>

                                <!-- Visual Design Section -->
                                <div class="form-section">
                                    <h4>Visual Design</h4>

                                    <div class="form-group">
                                        <label for="edit-cover-image">Cover Image URL</label>
                                        <input type="url" id="edit-cover-image" name="cover_image" value="{{drop.cover_image}}" placeholder="https://example.com/image.jpg" class="form-input">
                                        <small class="form-help">Optional: Add a cover image for your drop</small>
                                        {{#if errors.cover_image}}<p class="error">{{errors.cover_image}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-background-type">Background Type</label>
                                        <select id="edit-background-type" name="background_type" class="form-input">
                                            <option value="gradient" {{#if (eq drop.background_type "gradient")}}selected{{/if}}>Gradient</option>
                                            <option value="solid" {{#if (eq drop.background_type "solid")}}selected{{/if}}>Solid Color</option>
                                        </select>
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-background-color">Background Color</label>
                                        <input type="color" id="edit-background-color" name="background_color" value="{{drop.background_color}}" class="form-input file-input">
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-overscroll-background-color">Pull-to-Refresh Color</label>
                                        <input type="color" id="edit-overscroll-background-color" name="overscroll_background_color" value="{{#if drop.overscroll_background_color}}{{drop.overscroll_background_color}}{{else}}#ffffff{{/if}}" class="form-input file-input">
                                        <small class="form-help">Color shown when pulling down to refresh on mobile</small>
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-card-background-type">Card Style</label>
                                        <select id="edit-card-background-type" name="card_background_type" class="form-input">
                                            <option value="solid_white" {{#if (eq drop.card_background_type "solid_white")}}selected{{/if}}>Solid White</option>
                                            <option value="solid_dark" {{#if (eq drop.card_background_type "solid_dark")}}selected{{/if}}>Solid Dark</option>
                                            <option value="translucent_light" {{#if (eq drop.card_background_type "translucent_light")}}selected{{/if}}>Translucent Light</option>
                                            <option value="translucent_dark" {{#if (eq drop.card_background_type "translucent_dark")}}selected{{/if}}>Translucent Dark</option>
                                        </select>
                                    </div>
                                </div>

                                <!-- Text & Button Colors Section -->
                                <div class="form-section">
                                    <h4>Text & Button Colors</h4>

                                    <div class="form-group">
                                        <label for="edit-title-color">Title Color</label>
                                        <input type="color" id="edit-title-color" name="title_color" value="{{drop.title_color}}" class="form-input file-input">
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-description-color">Subtitle Color</label>
                                        <input type="color" id="edit-description-color" name="description_color" value="{{drop.description_color}}" class="form-input file-input">
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-button-color">Button Background</label>
                                        <input type="color" id="edit-button-color" name="button_color" value="{{drop.button_color}}" class="form-input file-input">
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-button-text-color">Button Text Color</label>
                                        <input type="color" id="edit-button-text-color" name="button_text_color" value="{{drop.button_text_color}}" class="form-input file-input">
                                    </div>
                                </div>

                                <!-- Social & Platform Links Section -->
                                <div class="form-section">
                                    <h4>Social & Platform Links</h4>

                                    <div class="form-group">
                                        <label for="edit-website-link">Website</label>
                                        <input type="url" id="edit-website-link" name="website_link" value="{{drop.website_link}}" placeholder="https://yourwebsite.com" class="form-input">
                                        {{#if errors.website_link}}<p class="error">{{errors.website_link}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-instagram-link">Instagram</label>
                                        <input type="url" id="edit-instagram-link" name="instagram_link" value="{{drop.instagram_link}}" placeholder="https://instagram.com/yourusername" class="form-input">
                                        {{#if errors.instagram_link}}<p class="error">{{errors.instagram_link}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-twitter-link">Twitter/X</label>
                                        <input type="url" id="edit-twitter-link" name="twitter_link" value="{{drop.twitter_link}}" placeholder="https://twitter.com/yourusername" class="form-input">
                                        {{#if errors.twitter_link}}<p class="error">{{errors.twitter_link}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-youtube-link">YouTube</label>
                                        <input type="url" id="edit-youtube-link" name="youtube_link" value="{{drop.youtube_link}}" placeholder="https://youtube.com/@yourusername" class="form-input">
                                        {{#if errors.youtube_link}}<p class="error">{{errors.youtube_link}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-spotify-link">Spotify</label>
                                        <input type="url" id="edit-spotify-link" name="spotify_link" value="{{drop.spotify_link}}" placeholder="https://open.spotify.com/artist/..." class="form-input">
                                        {{#if errors.spotify_link}}<p class="error">{{errors.spotify_link}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-tiktok-link">TikTok</label>
                                        <input type="url" id="edit-tiktok-link" name="tiktok_link" value="{{drop.tiktok_link}}" placeholder="https://tiktok.com/@yourusername" class="form-input">
                                        {{#if errors.tiktok_link}}<p class="error">{{errors.tiktok_link}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-apple-music-url">Apple Music</label>
                                        <input type="url" id="edit-apple-music-url" name="apple_music_url" value="{{drop.apple_music_url}}" placeholder="https://music.apple.com/..." class="form-input">
                                        {{#if errors.apple_music_url}}<p class="error">{{errors.apple_music_url}}</p>{{/if}}
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-soundcloud-url">SoundCloud</label>
                                        <input type="url" id="edit-soundcloud-url" name="soundcloud_url" value="{{drop.soundcloud_url}}" placeholder="https://soundcloud.com/..." class="form-input">
                                        {{#if errors.soundcloud_url}}<p class="error">{{errors.soundcloud_url}}</p>{{/if}}
                                    </div>
                                </div>

                                <!-- Form Settings Section -->
                                <div class="form-section">
                                    <h4>Form Settings</h4>

                                    <div class="form-group">
                                        <label class="checkbox-label">
                                            <input type="checkbox" id="edit-collect-email" name="collect_email" {{#if drop.collect_email}}checked{{/if}} class="checkbox-input">
                                            <span class="checkbox-text">Collect Email Addresses</span>
                                        </label>
                                        <small class="form-help">Required for sending notifications when the drop goes live</small>
                                    </div>

                                    <div class="form-group">
                                        <label class="checkbox-label">
                                            <input type="checkbox" id="edit-collect-phone" name="collect_phone" {{#if drop.collect_phone}}checked{{/if}} class="checkbox-input">
                                            <span class="checkbox-text">Collect Phone Numbers</span>
                                        </label>
                                        <small class="form-help">Optional: Collect phone numbers for SMS notifications</small>
                                    </div>

                                    <div class="form-group">
                                        <label for="edit-thank-you-message">Thank You Message</label>
                                        <textarea id="edit-thank-you-message" name="thank_you_message" rows="3" placeholder="Thank you for signing up! You'll be notified when this drop goes live." class="form-input">{{drop.thank_you_message}}</textarea>
                                        <small class="form-help">Message shown after successful signup</small>
                                        {{#if errors.thank_you_message}}<p class="error">{{errors.thank_you_message}}</p>{{/if}}
                                    </div>
                                </div>

                                <!-- Status & Visibility Section -->
                                <div class="form-section">
                                    <h4>Status & Visibility</h4>

                                    <div class="form-group">
                                        <label class="checkbox-label">
                                            <input type="checkbox" id="edit-is-active" name="is_active" {{#if drop.is_active}}checked{{/if}} class="checkbox-input">
                                            <span class="checkbox-text">Active Drop</span>
                                        </label>
                                        <small class="form-help">When active, your drop is publicly accessible and accepts signups. When inactive, the drop URL will show a "Drop Inactive" page and block all signups.</small>
                                    </div>

                                    <div class="form-group">
                                        <label class="checkbox-label">
                                            <input type="checkbox" id="edit-show-on-homepage" name="show_on_homepage" {{#if drop.show_on_homepage}}checked{{/if}} class="checkbox-input">
                                            <span class="checkbox-text">Show on Homepage</span>
                                        </label>
                                        <small class="form-help">When enabled, this drop will appear as a featured card on the homepage for all visitors to see.</small>
                                    </div>
                                </div>
                            </div>

                            <!-- Form Actions -->
                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">
                                    <span class="btn-text">Save Changes</span>
                                    <span class="btn-loader" style="display: none;">
                                        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" fill="none" viewBox="0 0 24 24">
                                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                    </span>
                                </button>
                            </div>

                            <!-- Response Area -->
                            <div id="drop-edit-response" class="form-response"></div>
                        </div>
                    </div>





                    <!-- MESSAGING TAB CONTENT -->
                    <div class="tab-content p-6" data-tab-content="messaging">
                        <div class="text-center py-12">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">Messaging</h3>
                            <p class="mt-1 text-sm text-gray-500">Configure email templates, SMS messages, and notification settings.</p>
                            <div class="mt-4">
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                    Coming Soon
                                </span>
                            </div>
                        </div>
                    </div>

                    <!-- ADVANCED TAB CONTENT -->
                    <div class="tab-content p-6" data-tab-content="advanced">
                        <div class="text-center py-12">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">Advanced Settings</h3>
                            <p class="mt-1 text-sm text-gray-500">Advanced configuration options and integrations.</p>
                            <div class="mt-4">
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                    Coming Soon
                                </span>
                            </div>
                        </div>
                    </div>

                    <!-- SHARING TAB CONTENT -->
                    <div class="tab-content p-6" data-tab-content="sharing">
                        <div class="text-center py-12">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">Sharing & QR Codes</h3>
                            <p class="mt-1 text-sm text-gray-500">Share your drop and generate QR codes for easy access.</p>
                            <div class="mt-4">
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                    Coming Soon
                                </span>
                            </div>
                        </div>
                    </div>

                    <!-- ANALYTICS TAB CONTENT -->
                    <div class="tab-content p-6" data-tab-content="analytics">
                        <div class="space-y-6">
                            <div>
                                <h3 class="text-lg font-medium text-gray-900 mb-2">Drop Analytics</h3>
                                <p class="text-sm text-gray-500 mb-4">Track your drop's performance and fan engagement</p>
                            </div>

                            <!-- Stats Cards -->
                            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                                <div class="bg-gray-50 rounded-lg p-4">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0">
                                            <div class="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
                                                <svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                                </svg>
                                            </div>
                                        </div>
                                        <div class="ml-4">
                                            <p class="text-sm font-medium text-gray-500">Page Views</p>
                                            <p class="text-lg font-semibold text-gray-900" id="analytics-views">{{drop.view_count}}</p>
                                        </div>
                                    </div>
                                </div>

                                <div class="bg-gray-50 rounded-lg p-4">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0">
                                            <div class="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
                                                <svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                                </svg>
                                            </div>
                                        </div>
                                        <div class="ml-4">
                                            <p class="text-sm font-medium text-gray-500">Total Fans</p>
                                            <p class="text-lg font-semibold text-gray-900" id="analytics-fans">{{drop.signup_count}}</p>
                                        </div>
                                    </div>
                                </div>

                                <div class="bg-gray-50 rounded-lg p-4">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0">
                                            <div class="w-8 h-8 bg-purple-500 rounded-md flex items-center justify-center">
                                                <svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                                                </svg>
                                            </div>
                                        </div>
                                        <div class="ml-4">
                                            <p class="text-sm font-medium text-gray-500">Conversion Rate</p>
                                            <p class="text-lg font-semibold text-gray-900" id="analytics-conversion">0%</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Recent Signups -->
                            <div class="bg-gray-50 rounded-lg p-4">
                                <h4 class="text-sm font-medium text-gray-900 mb-3">Recent Fan Signups</h4>
                                <div id="recent-signups" class="space-y-2">
                                    <p class="text-sm text-gray-500">Loading recent signups...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <!-- Preview Section (1/3 width on desktop) -->
        <div class="lg:col-span-1">
            <div class="bg-white shadow rounded-lg overflow-hidden sticky top-6">
                <!-- Preview Header -->
                <div class="px-4 py-3 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <h3 class="text-sm font-medium text-gray-900">Live Preview</h3>
                        <div class="flex items-center space-x-2">
                            <button type="button" id="preview-desktop" class="preview-mode-btn active inline-flex items-center px-2 py-1 border border-gray-300 rounded text-xs font-medium text-gray-700 bg-white hover:bg-gray-50">
                                <svg class="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                </svg>
                                Desktop
                            </button>
                            <button type="button" id="preview-mobile" class="preview-mode-btn inline-flex items-center px-2 py-1 border border-gray-300 rounded text-xs font-medium text-gray-700 bg-white hover:bg-gray-50">
                                <svg class="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a1 1 0 001-1V4a1 1 0 00-1-1H8a1 1 0 00-1 1v16a1 1 0 001 1z" />
                                </svg>
                                Mobile
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Preview Content -->
                <div class="p-4">
                    <div id="preview-container" class="border border-gray-200 rounded-lg overflow-hidden">
                        <iframe id="preview-iframe" src="/drop/{{drop.slug}}?preview=true" class="w-full h-96 border-0"></iframe>
                    </div>

                    <!-- Preview Actions -->
                    <div class="mt-4 flex items-center justify-between text-xs text-gray-500">
                        <span>Updates automatically as you type</span>
                        <button type="button" onclick="refreshPreview()" class="text-primary-600 hover:text-primary-500">
                            Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modern Drop Edit JavaScript - Enhanced Real-Time Preview System -->
<script>
// Global variables for preview elements
let previewIframe;
let previewDocument;
let previewTitle, previewSubtitle, previewDescription, previewSubHeader, previewSubHeaderTitle, previewButtonText, previewUrlSlug;
let previewCoverImage, previewCover;

// Form input elements
let titleInput, subtitleInput, descriptionInput, rsvpTitleInput, subHeaderInput, subHeaderTitleInput, slugInput, buttonTextInput, coverImageInput;
let backgroundColorInput, overscrollBackgroundColorInput, cardColorInput, titleColorInput, descriptionColorInput, buttonColorInput, formFieldColorInput;
let collectEmailToggle, collectPhoneToggle;

// Intelligent navigation function for back button
function navigateBack() {
    console.log('🔙 Navigating back...');

    // Check if we have a referrer and it's from the same domain
    const referrer = document.referrer;
    const currentDomain = window.location.origin;

    console.log('🔍 Referrer:', referrer);
    console.log('🔍 Current domain:', currentDomain);

    // If referrer exists and is from same domain, use history.back()
    if (referrer && referrer.startsWith(currentDomain)) {
        console.log('✅ Using history.back() - valid referrer from same domain');
        window.history.back();
        return;
    }

    // Check if we have history entries to go back to
    if (window.history.length > 1) {
        console.log('✅ Using history.back() - history entries available');
        window.history.back();
        return;
    }

    // Fallback: navigate to drops list
    console.log('🔄 Fallback: navigating to drops list');
    window.location.href = '/drops';
}

document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Initializing modern drop edit system...');

    // Initialize form elements
    initializeFormElements();

    // Initialize form elements
    initializeFormElements();

    // Initialize tab functionality
    initializeTabSystem();

    // Initialize preview system
    initializePreviewSystem();

    // Initialize form submission
    initializeFormSubmission();

    // Initialize real-time updates
    initializeRealTimeUpdates();

    // Initialize debug test button
    initializeDebugTest();

    // Initialize gradient editor with multiple attempts to ensure proper loading
    setTimeout(() => {
        console.log('🎨 CRITICAL: Initializing gradient editor (attempt 1)...');
        initializeGradientEditor();
    }, 100);

    // Additional initialization attempts to ensure data is loaded
    setTimeout(() => {
        console.log('🎨 CRITICAL: Gradient editor initialization check (attempt 2)...');

        // Check if gradient data was loaded properly
        if (!gradientData || !window.gradientDataLoaded) {
            console.log('🎨 Re-attempting gradient data loading...');
            loadExistingGradientData();

            // Force UI update
            setTimeout(() => {
                setGradientUIFromData(0);
            }, 100);
        } else {
            console.log('🎨 ✅ Gradient data already loaded properly');
        }
    }, 1000);

    // Final check and force update
    setTimeout(() => {
        console.log('🎨 FINAL: Gradient editor final check (attempt 3)...');

        const backgroundTypeSelect = document.getElementById('edit-background-type');
        if (backgroundTypeSelect && backgroundTypeSelect.value === 'gradient') {
            console.log('🎨 Background is gradient, ensuring UI is synced...');

            if (gradientData) {
                setGradientUIFromData(0);
                updateGradientPreview();
                console.log('🎨 ✅ Final UI sync completed');
            } else {
                console.log('🎨 ⚠️ No gradient data available, loading defaults');
                gradientData = { ...defaultGradientData };
                setGradientUIFromData(0);
                updateGradientPreview();
            }
        }
    }, 2000);

    // Add gradient debug function to window for manual testing
    window.debugGradientData = function() {
        console.log('🔍 GRADIENT DEBUG INFORMATION');
        console.log('='.repeat(50));

        // Check data sources
        const hiddenInput = document.getElementById('gradient-data');
        const scriptTag = document.getElementById('gradient-data-json');

        console.log('📋 Data Sources:');
        console.log('   Hidden Input:', hiddenInput ? `"${hiddenInput.value}"` : 'NOT FOUND');
        console.log('   Script Tag:', scriptTag ? `"${scriptTag.textContent}"` : 'NOT FOUND');

        // Check current gradient data
        console.log('\n🎨 Current Gradient Data:');
        console.log('   Type:', gradientData.type);
        console.log('   Angle:', gradientData.angle);
        console.log('   Stops:', gradientData.stops);
        console.log('   Data Loaded Flag:', window.gradientDataLoaded);

        // Check UI elements
        console.log('\n🖼️ UI Elements:');
        const gradientEditor = document.getElementById('gradient-editor');
        const typeButtons = document.querySelectorAll('.gradient-type-btn');
        const directionButtons = document.querySelectorAll('.gradient-direction-btn');
        const preview = document.getElementById('gradient-preview');

        console.log('   Gradient Editor:', gradientEditor ? 'FOUND' : 'NOT FOUND', gradientEditor?.style.display);
        console.log('   Type Buttons:', typeButtons.length);
        console.log('   Direction Buttons:', directionButtons.length);
        console.log('   Preview Element:', preview ? 'FOUND' : 'NOT FOUND');

        // Check background type
        const backgroundTypeSelect = document.getElementById('edit-background-type');
        console.log('   Background Type:', backgroundTypeSelect ? backgroundTypeSelect.value : 'NOT FOUND');

        // Force reload gradient data
        console.log('\n🔄 Force Reloading Gradient Data...');
        const success = loadExistingGradientData();
        console.log('   Reload Success:', success);

        return {
            hiddenInput: hiddenInput?.value,
            scriptTag: scriptTag?.textContent,
            gradientData,
            dataLoaded: window.gradientDataLoaded,
            uiElements: {
                editor: !!gradientEditor,
                typeButtons: typeButtons.length,
                directionButtons: directionButtons.length,
                preview: !!preview
            }
        };
    };

    console.log('✅ Modern drop edit system initialized successfully');
    console.log('💡 Use window.debugGradientData() to debug gradient issues');

    // Enhanced form field debugging and validation
    setTimeout(() => {
        console.log('🔍 ENHANCED FORM FIELDS DEBUG');
        console.log('='.repeat(50));

        const form = document.getElementById('drop-edit-form');
        if (!form) {
            console.error('❌ Form element not found!');
            return;
        }

        // Check all form elements
        const allInputs = form.querySelectorAll('input, select, textarea');
        console.log(`📊 Total form elements found: ${allInputs.length}`);

        // Verify styling fields specifically
        const stylingFields = [
            { name: 'background_type', type: 'select', expected: '{{drop.background_type}}' },
            { name: 'card_background_type', type: 'select', expected: '{{drop.card_background_type}}' },
            { name: 'background_color', type: 'color', expected: '{{drop.background_color}}' },
            { name: 'overscroll_background_color', type: 'color', expected: '{{#if drop.overscroll_background_color}}{{drop.overscroll_background_color}}{{else}}#ffffff{{/if}}' },
            { name: 'button_color', type: 'color', expected: '{{drop.button_color}}' },
            { name: 'button_text_color', type: 'color', expected: '{{drop.button_text_color}}' },
            { name: 'title_color', type: 'color', expected: '{{drop.title_color}}' },
            { name: 'description_color', type: 'color', expected: '{{drop.description_color}}' }
        ];

        console.log('\n🎨 STYLING FIELDS VERIFICATION');
        console.log('-'.repeat(40));

        let allStylingFieldsFound = true;

        stylingFields.forEach(field => {
            const element = document.querySelector(`[name="${field.name}"]`);
            if (element) {
                const value = element.value;
                const isPopulated = value && value !== '';
                console.log(`   ✅ ${field.name} (${field.type}): "${value}" ${isPopulated ? '✅' : '⚠️ EMPTY'}`);

                // Check if element is visible
                const isVisible = element.offsetParent !== null;
                if (!isVisible) {
                    console.warn(`   ⚠️ ${field.name} element is hidden!`);
                }

                // For select elements, check options
                if (field.type === 'select' && element.tagName === 'SELECT') {
                    console.log(`     📋 Options: ${Array.from(element.options).map(opt => `"${opt.value}"`).join(', ')}`);
                    console.log(`     🎯 Selected: "${element.selectedOptions[0]?.value || 'none'}"`);
                }
            } else {
                console.error(`   ❌ ${field.name}: ELEMENT NOT FOUND!`);
                allStylingFieldsFound = false;
            }
        });

        // Test form data collection
        console.log('\n📦 FORM DATA COLLECTION TEST');
        console.log('-'.repeat(40));

        try {
            const formData = new FormData(form);
            const data = Object.fromEntries(formData);

            console.log('📊 Collected form data:');
            stylingFields.forEach(field => {
                const value = data[field.name];
                console.log(`   ${field.name}: "${value || 'MISSING'}"`);
            });

            // Check for any missing styling data
            const missingStylingData = stylingFields.filter(field => !data[field.name]);
            if (missingStylingData.length > 0) {
                console.warn('⚠️ Missing styling data:', missingStylingData.map(f => f.name));
            } else {
                console.log('✅ All styling fields have data');
            }

        } catch (error) {
            console.error('❌ Error collecting form data:', error);
        }

        // Summary
        console.log('\n📋 SUMMARY');
        console.log('-'.repeat(40));
        console.log(`Form found: ${form ? '✅' : '❌'}`);
        console.log(`Total elements: ${allInputs.length}`);
        console.log(`Styling fields found: ${allStylingFieldsFound ? '✅' : '❌'}`);

    }, 1500);
});

function initializeFormElements() {
    // Get all form input elements
    titleInput = document.getElementById('edit-title');
    subtitleInput = document.getElementById('edit-subtitle');
    descriptionInput = document.getElementById('edit-description');
    rsvpTitleInput = document.getElementById('edit-rsvp-title');
    subHeaderInput = document.getElementById('edit-sub-header');
    subHeaderTitleInput = document.getElementById('edit-sub-header-title');
    slugInput = document.getElementById('edit-slug');
    buttonTextInput = document.getElementById('edit-button-text');
    coverImageInput = document.getElementById('edit-cover-image');

    // Color inputs
    backgroundColorInput = document.getElementById('edit-background-color');
    overscrollBackgroundColorInput = document.getElementById('edit-overscroll-background-color');
    const backgroundTypeSelect = document.getElementById('edit-background-type');
    const cardBackgroundTypeSelect = document.getElementById('edit-card-background-type');
    titleColorInput = document.getElementById('edit-title-color');
    descriptionColorInput = document.getElementById('edit-description-color');
    buttonColorInput = document.getElementById('edit-button-color');
    const buttonTextColorInput = document.getElementById('edit-button-text-color');

    // Toggle inputs
    collectEmailToggle = document.getElementById('edit-collect-email');
    collectPhoneToggle = document.getElementById('edit-collect-phone');

    console.log('📝 Form elements initialized');

    // Initialize RSVP title character counter
    if (rsvpTitleInput) {
        updateRsvpTitleCounter();
    }
}

// RSVP Title character counter function
function updateRsvpTitleCounter() {
    if (!rsvpTitleInput) return;

    const counter = document.getElementById('rsvp-title-counter');
    if (!counter) return;

    const currentLength = rsvpTitleInput.value.length;
    const maxLength = 30;

    counter.textContent = `${currentLength}/${maxLength}`;

    // Update counter color based on length
    if (currentLength > 25) {
        counter.className = 'text-sm text-orange-500';
    } else if (currentLength > 28) {
        counter.className = 'text-sm text-red-500';
    } else {
        counter.className = 'text-sm text-gray-400';
    }
}

function initializeTabSystem() {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    const tabNavigation = document.querySelector('.tab-navigation') || document.querySelector('nav[aria-label="Tabs"]');

    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            const targetTab = this.getAttribute('data-tab');

            // Remove active class from all tabs and contents
            tabButtons.forEach(btn => {
                btn.classList.remove('border-primary-500', 'text-primary-600');
                btn.classList.add('border-transparent', 'text-gray-500');
            });

            tabContents.forEach(content => {
                content.classList.remove('active');
            });

            // Add active class to clicked tab
            this.classList.remove('border-transparent', 'text-gray-500');
            this.classList.add('border-primary-500', 'text-primary-600');

            // Show corresponding content
            const targetContent = document.querySelector(`[data-tab-content="${targetTab}"]`);
            if (targetContent) {
                targetContent.classList.add('active');
            }

            // Scroll active tab into view on mobile
            if (window.innerWidth <= 768) {
                const nav = document.querySelector('nav[aria-label="Tabs"]');
                if (nav) {
                    scrollTabIntoView(this, nav);
                }
            }

            // Load analytics if analytics tab is clicked
            if (targetTab === 'analytics') {
                loadAnalytics();
            }
        });
    });

    // Initialize mobile tab enhancements
    if (window.innerWidth <= 768) {
        initializeMobileTabEnhancements();
    }

    // Re-initialize on window resize
    window.addEventListener('resize', function() {
        if (window.innerWidth <= 768) {
            initializeMobileTabEnhancements();
        }
    });

    console.log('🗂️ Tab system initialized');
}

function initializeMobileTabEnhancements() {
    const tabNavigation = document.querySelector('nav[aria-label="Tabs"]');
    if (!tabNavigation) {
        console.log('📱 No tab navigation found for mobile enhancements');
        return;
    }

    console.log('📱 Initializing mobile tab enhancements...');

    // Force horizontal scrolling
    tabNavigation.style.overflowX = 'auto';
    tabNavigation.style.webkitOverflowScrolling = 'touch';
    tabNavigation.style.scrollBehavior = 'smooth';

    // Add touch event handlers for better mobile experience
    let isScrolling = false;
    let touchStartX = 0;

    tabNavigation.addEventListener('touchstart', function(e) {
        isScrolling = false;
        touchStartX = e.touches[0].clientX;
    }, { passive: true });

    tabNavigation.addEventListener('touchmove', function(e) {
        const touchX = e.touches[0].clientX;
        const deltaX = Math.abs(touchX - touchStartX);
        if (deltaX > 10) {
            isScrolling = true;
        }
    }, { passive: true });

    // Prevent tab clicks during scrolling
    const tabButtons = tabNavigation.querySelectorAll('button');
    tabButtons.forEach(button => {
        button.addEventListener('touchend', function(e) {
            if (isScrolling) {
                e.preventDefault();
                e.stopPropagation();
                console.log('🚫 Tab click prevented during scroll');
            }
        }, { passive: false });

        // Add visual feedback
        button.addEventListener('touchstart', function() {
            if (!isScrolling) {
                this.style.opacity = '0.7';
            }
        }, { passive: true });

        button.addEventListener('touchend', function() {
            this.style.opacity = '';
        }, { passive: true });
    });

    console.log('✅ Mobile tab enhancements initialized');
}

function scrollTabIntoView(activeTab, container) {
    if (!activeTab || !container) {
        console.log('⚠️ scrollTabIntoView: Missing parameters');
        return;
    }

    console.log('📍 Scrolling tab into view:', activeTab.textContent?.trim());

    const containerRect = container.getBoundingClientRect();
    const tabRect = activeTab.getBoundingClientRect();

    // Calculate if tab is outside visible area with buffer
    const buffer = 20;
    const isTabOutsideLeft = tabRect.left < containerRect.left + buffer;
    const isTabOutsideRight = tabRect.right > containerRect.right - buffer;

    if (isTabOutsideLeft || isTabOutsideRight) {
        // Calculate scroll position to center the tab
        const tabCenter = activeTab.offsetLeft + (activeTab.offsetWidth / 2);
        const containerCenter = container.offsetWidth / 2;
        const scrollPosition = Math.max(0, tabCenter - containerCenter);

        console.log('🎯 Scrolling to position:', scrollPosition);

        container.scrollTo({
            left: scrollPosition,
            behavior: 'smooth'
        });
    }
}

function updateScrollIndicators(container) {
    if (!container) return;

    const scrollLeft = container.scrollLeft;
    const scrollWidth = container.scrollWidth;
    const clientWidth = container.clientWidth;
    const maxScrollLeft = scrollWidth - clientWidth;

    // Update scroll indicators via CSS custom properties
    const showLeftIndicator = scrollLeft > 10;
    const showRightIndicator = scrollLeft < maxScrollLeft - 10;

    container.style.setProperty('--scroll-indicator-left-opacity', showLeftIndicator ? '1' : '0');
    container.style.setProperty('--scroll-indicator-right-opacity', showRightIndicator ? '1' : '0');
}

function initializePreviewSystem() {
    previewIframe = document.getElementById('preview-iframe');

    if (!previewIframe) {
        console.error('❌ Preview iframe not found');
        return;
    }

    // Enhanced iframe loading with error handling
    let iframeLoadAttempts = 0;
    const maxLoadAttempts = 3;

    function handleIframeLoad() {
        iframeLoadAttempts++;
        console.log(`🖼️ Preview iframe load attempt ${iframeLoadAttempts}`);

        try {
            // Try to access iframe content
            previewDocument = previewIframe.contentDocument || previewIframe.contentWindow.document;

            if (previewDocument) {
                // Get preview elements
                previewTitle = previewDocument.querySelector('.drop-title');
                previewSubtitle = previewDocument.querySelector('.drop-subtitle');
                previewDescription = previewDocument.querySelector('.drop-description p');
                previewSubHeader = previewDocument.querySelector('.drop-sub-header-content');
                previewSubHeaderTitle = previewDocument.querySelector('.drop-sub-header-title');
                previewButtonText = previewDocument.querySelector('.signup-button .button-text');
                previewUrlSlug = previewDocument.querySelector('.drop-url-slug');
                previewCoverImage = previewDocument.querySelector('.drop-cover-image img');
                previewCover = previewDocument.querySelector('.drop-cover-image');

                console.log('🖼️ Preview elements found:', {
                    title: !!previewTitle,
                    subtitle: !!previewSubtitle,
                    description: !!previewDescription,
                    subHeader: !!previewSubHeader,
                    subHeaderTitle: !!previewSubHeaderTitle,
                    buttonText: !!previewButtonText,
                    urlSlug: !!previewUrlSlug,
                    coverImage: !!previewCoverImage
                });

                // Initialize preview content
                updatePreviewContent();
                updatePreviewColors();

                console.log('✅ Preview system successfully connected to iframe content');
            } else {
                throw new Error('Cannot access iframe document');
            }

        } catch (error) {
            console.warn(`⚠️ Preview iframe access restricted (attempt ${iframeLoadAttempts}):`, error.message);

            // Use refresh-based preview updates instead
            console.log('🔄 Switching to refresh-based preview updates');
            initializeRefreshBasedPreview();
        }
    }

    function handleIframeError() {
        console.error('❌ Preview iframe failed to load');

        if (iframeLoadAttempts < maxLoadAttempts) {
            console.log(`🔄 Retrying iframe load (attempt ${iframeLoadAttempts + 1}/${maxLoadAttempts})`);
            setTimeout(() => {
                refreshPreview();
            }, 1000);
        } else {
            console.error('❌ Max iframe load attempts reached, using fallback');
            showPreviewError();
        }
    }

    // Add event listeners
    previewIframe.addEventListener('load', handleIframeLoad);
    previewIframe.addEventListener('error', handleIframeError);

    // Initial load check
    if (previewIframe.src) {
        // If iframe already has a src, trigger load check
        setTimeout(handleIframeLoad, 500);
    }

    // Preview mode switching
    const previewButtons = document.querySelectorAll('.preview-mode-btn');

    previewButtons.forEach(button => {
        button.addEventListener('click', function() {
            previewButtons.forEach(btn => btn.classList.remove('active', 'bg-primary-50', 'text-primary-600', 'border-primary-300'));
            this.classList.add('active', 'bg-primary-50', 'text-primary-600', 'border-primary-300');

            const mode = this.id.replace('preview-', '');
            const container = document.getElementById('preview-container');
            const viewport = container.querySelector('.preview-viewport');

            if (mode === 'mobile') {
                // Mobile preview mode
                viewport.classList.remove('desktop');
                viewport.classList.add('mobile');
                previewIframe.style.width = '375px';
                previewIframe.style.height = '667px';
                console.log('📱 Switched to mobile preview mode');
            } else {
                // Desktop preview mode
                viewport.classList.remove('mobile');
                viewport.classList.add('desktop');
                previewIframe.style.width = '100%';
                previewIframe.style.height = '600px';
                console.log('🖥️ Switched to desktop preview mode');
            }
        });
    });

    console.log('🖥️ Preview system initialized');
}

function initializeRefreshBasedPreview() {
    console.log('🔄 Initializing refresh-based preview system');

    // Use debounced refresh for real-time updates
    let refreshTimeout;

    window.updatePreviewViaRefresh = function() {
        clearTimeout(refreshTimeout);
        refreshTimeout = setTimeout(() => {
            refreshPreview();
        }, 1000); // Debounce to 1 second
    };

    console.log('✅ Refresh-based preview system ready');
}

function showPreviewError() {
    const container = document.getElementById('preview-container');
    if (container) {
        container.innerHTML = `
            <div class="flex items-center justify-center h-96 bg-gray-50 rounded-lg">
                <div class="text-center">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">Preview Unavailable</h3>
                    <p class="mt-1 text-sm text-gray-500">Unable to load live preview. Use "View Live" to see your drop.</p>
                    <div class="mt-4">
                        <button type="button" onclick="refreshPreview()" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700">
                            Try Again
                        </button>
                    </div>
                </div>
            </div>
        `;
    }
}

function initializeRealTimeUpdates() {
    // Content updates
    if (titleInput) titleInput.addEventListener('input', updatePreviewContent);
    if (subtitleInput) subtitleInput.addEventListener('input', updatePreviewContent);
    if (descriptionInput) descriptionInput.addEventListener('input', updatePreviewContent);
    if (rsvpTitleInput) {
        rsvpTitleInput.addEventListener('input', function() {
            updateRsvpTitleCounter();
            updatePreviewContent();
        });
    }
    if (subHeaderInput) subHeaderInput.addEventListener('input', updatePreviewContent);
    if (subHeaderTitleInput) subHeaderTitleInput.addEventListener('input', updatePreviewContent);
    if (buttonTextInput) buttonTextInput.addEventListener('input', updatePreviewContent);
    if (coverImageInput) coverImageInput.addEventListener('input', updatePreviewContent);

    // Color updates
    if (backgroundColorInput) backgroundColorInput.addEventListener('input', updatePreviewColors);
    if (overscrollBackgroundColorInput) overscrollBackgroundColorInput.addEventListener('input', updatePreviewColors);
    const backgroundTypeSelect = document.getElementById('edit-background-type');
    const cardBackgroundTypeSelect = document.getElementById('edit-card-background-type');
    const buttonTextColorInput = document.getElementById('edit-button-text-color');

    if (backgroundTypeSelect) backgroundTypeSelect.addEventListener('change', updatePreviewColors);
    if (cardBackgroundTypeSelect) cardBackgroundTypeSelect.addEventListener('change', updatePreviewColors);
    if (titleColorInput) titleColorInput.addEventListener('input', updatePreviewColors);
    if (descriptionColorInput) descriptionColorInput.addEventListener('input', updatePreviewColors);
    if (buttonColorInput) buttonColorInput.addEventListener('input', updatePreviewColors);
    if (buttonTextColorInput) buttonTextColorInput.addEventListener('input', updatePreviewColors);

    // Form field toggles
    if (collectEmailToggle) collectEmailToggle.addEventListener('change', updatePreviewFormFields);
    if (collectPhoneToggle) collectPhoneToggle.addEventListener('change', updatePreviewFormFields);

    console.log('⚡ Real-time updates initialized');
}

function updatePreviewContent() {
    try {
        // Try direct iframe manipulation first
        if (previewDocument && previewTitle && titleInput) {
            previewTitle.textContent = titleInput.value || 'Drop Title';
        }
        if (previewDocument && previewSubtitle && subtitleInput) {
            previewSubtitle.textContent = subtitleInput.value || '';
            // Show/hide subtitle based on content
            previewSubtitle.style.display = subtitleInput.value ? 'block' : 'none';
        }
        if (previewDocument && previewDescription && descriptionInput) {
            previewDescription.textContent = descriptionInput.value || 'Drop description';
        }
        if (previewDocument && previewSubHeader && subHeaderInput) {
            previewSubHeader.textContent = subHeaderInput.value || '';
            // Show/hide sub-header section based on content
            const subHeaderSection = previewSubHeader.closest('.drop-sub-header');
            if (subHeaderSection) {
                subHeaderSection.style.display = subHeaderInput.value ? 'block' : 'none';
            }
        }
        if (previewDocument && previewSubHeaderTitle && subHeaderTitleInput) {
            previewSubHeaderTitle.textContent = subHeaderTitleInput.value || 'About';
        }
        if (previewDocument && previewButtonText) {
            // Use RSVP title if available, otherwise fall back to button text or default
            const rsvpTitle = rsvpTitleInput ? rsvpTitleInput.value : '';
            const buttonText = buttonTextInput ? buttonTextInput.value : '';
            previewButtonText.textContent = rsvpTitle || buttonText || 'Get Notified';
        }
        if (previewDocument && previewUrlSlug && slugInput) {
            previewUrlSlug.textContent = slugInput.value || 'drop-slug';
        }

        // Handle cover image
        if (previewDocument && previewCoverImage && previewCover && coverImageInput) {
            const coverImageUrl = coverImageInput.value;
            if (coverImageUrl && isValidUrl(coverImageUrl)) {
                previewCoverImage.src = coverImageUrl;
                previewCover.style.display = 'block';
            } else {
                previewCover.style.display = 'none';
            }
        }

        console.log('📝 Preview content updated via direct manipulation');
    } catch (error) {
        console.warn('⚠️ Direct preview update failed, using refresh method');

        // Fallback to refresh-based updates
        if (window.updatePreviewViaRefresh) {
            window.updatePreviewViaRefresh();
        } else {
            // Immediate refresh if no debounced function available
            setTimeout(refreshPreview, 500);
        }
    }
}

function updatePreviewColors() {
    try {
        if (!previewDocument) return;

        const backgroundColor = backgroundColorInput?.value || '#ffffff';
        const overscrollBackgroundColor = overscrollBackgroundColorInput?.value || '#ffffff';
        const cardColor = cardColorInput?.value || '#ffffff';
        const titleColor = titleColorInput?.value || '#000000';
        const descriptionColor = descriptionColorInput?.value || '#666666';
        const buttonColor = buttonColorInput?.value || '#007bff';
        const formFieldColor = formFieldColorInput?.value || '#ffffff';

        // Apply colors using CSS custom properties
        const documentRoot = previewDocument.documentElement;

        documentRoot.style.setProperty('--drop-background-color', backgroundColor);
        documentRoot.style.setProperty('--drop-overscroll-background-color', overscrollBackgroundColor);
        documentRoot.style.setProperty('--drop-card-color', cardColor);
        documentRoot.style.setProperty('--drop-title-color', titleColor);
        documentRoot.style.setProperty('--drop-description-color', descriptionColor);
        documentRoot.style.setProperty('--drop-button-color', buttonColor);
        documentRoot.style.setProperty('--drop-form-field-color', formFieldColor);

        console.log('🎨 Preview colors updated:', {
            backgroundColor,
            overscrollBackgroundColor,
            cardColor,
            titleColor,
            descriptionColor,
            buttonColor,
            formFieldColor
        });
    } catch (error) {
        console.warn('⚠️ Preview color update failed, refreshing iframe');
        refreshPreview();
    }
}

function updatePreviewFormFields() {
    try {
        if (!previewDocument) return;

        const emailField = previewDocument.querySelector('.email-field');
        const phoneField = previewDocument.querySelector('.phone-field');

        if (emailField && collectEmailToggle) {
            emailField.style.display = collectEmailToggle.checked ? 'block' : 'none';
        }
        if (phoneField && collectPhoneToggle) {
            phoneField.style.display = collectPhoneToggle.checked ? 'block' : 'none';
        }

        console.log('📱 Preview form fields updated');
    } catch (error) {
        console.warn('⚠️ Preview form fields update failed');
    }
}

function isValidUrl(string) {
    try {
        new URL(string);
        return true;
    } catch (_) {
        return false;
    }
}

function refreshPreview() {
    console.log('🔄 Refreshing preview iframe...');

    const iframe = document.getElementById('preview-iframe');
    if (!iframe) {
        console.error('❌ Preview iframe not found');
        return;
    }

    // Get the drop slug from the current page URL or data
    const dropSlug = '{{drop.slug}}';
    if (!dropSlug) {
        console.error('❌ Drop slug not found');
        return;
    }

    // Construct the preview URL with proper parameters
    const baseUrl = window.location.origin;
    const previewUrl = new URL(`${baseUrl}/drop/${dropSlug}`);

    // Add preview parameter to ensure we get the actual landing page
    previewUrl.searchParams.set('preview', 'true');
    previewUrl.searchParams.set('edit_mode', 'true');
    previewUrl.searchParams.set('_refresh', Date.now());

    // Add cache busting to ensure fresh content
    previewUrl.searchParams.set('t', Date.now());

    console.log('🌐 Refreshing with preview URL:', previewUrl.toString());

    // Show loading state with better UX
    iframe.style.opacity = '0.6';
    iframe.style.filter = 'blur(1px)';

    // Add loading indicator
    const container = iframe.parentElement;
    let loadingIndicator = container.querySelector('.preview-loading');
    if (!loadingIndicator) {
        loadingIndicator = document.createElement('div');
        loadingIndicator.className = 'preview-loading absolute inset-0 flex items-center justify-center bg-white bg-opacity-75 z-10';
        loadingIndicator.innerHTML = `
            <div class="flex items-center space-x-2 text-gray-600">
                <svg class="animate-spin h-5 w-5" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span class="text-sm">Updating preview...</span>
            </div>
        `;
        container.style.position = 'relative';
        container.appendChild(loadingIndicator);
    }
    loadingIndicator.style.display = 'flex';

    // Clear the iframe source first to force a complete reload
    iframe.src = '';

    setTimeout(() => {
        iframe.src = previewUrl.toString();

        // Enhanced load handling
        const handleLoad = () => {
            iframe.style.opacity = '1';
            iframe.style.filter = 'none';
            loadingIndicator.style.display = 'none';
            console.log('✅ Preview refreshed successfully');

            // Try to re-establish iframe communication
            setTimeout(() => {
                try {
                    const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                    if (iframeDoc) {
                        console.log('🔗 Re-established iframe document access');
                        // Re-initialize preview elements
                        initializePreviewSystem();
                    }
                } catch (error) {
                    console.log('ℹ️ Iframe access still restricted, using refresh-based updates');
                }
            }, 500);
        };

        const handleError = () => {
            iframe.style.opacity = '1';
            iframe.style.filter = 'none';
            loadingIndicator.style.display = 'none';
            console.error('❌ Preview failed to load');

            // Show error state
            showPreviewError();
        };

        // Remove any existing event listeners
        iframe.onload = null;
        iframe.onerror = null;

        // Add new event listeners
        iframe.addEventListener('load', handleLoad, { once: true });
        iframe.addEventListener('error', handleError, { once: true });

        // Timeout fallback
        setTimeout(() => {
            if (iframe.style.opacity !== '1') {
                console.warn('⚠️ Preview load timeout, assuming success');
                handleLoad();
            }
        }, 5000);

    }, 300);
}

// Advanced Gradient Editor System
let gradientData = null; // Start as null to detect if data was loaded

// Default gradient data - only used if no database data exists
const defaultGradientData = {
    type: 'linear',
    angle: 90,
    stops: [
        { color: '#667eea', position: 0 },
        { color: '#764ba2', position: 100 }
    ]
};

function loadExistingGradientData() {
    console.log('🎨 CRITICAL: Loading existing gradient data from drop...');

    // Reset gradient data to null to detect if we successfully load data
    gradientData = null;
    window.gradientDataLoaded = false;

    // Get data sources
    const gradientDataScript = document.getElementById('gradient-data-json');
    const gradientDataInput = document.getElementById('gradient-data');

    console.log('🎨 Data source elements:');
    console.log('   Script tag:', gradientDataScript ? 'FOUND' : 'NOT FOUND');
    console.log('   Hidden input:', gradientDataInput ? 'FOUND' : 'NOT FOUND');

    let existingGradientData = null;
    let dataSource = 'none';

    // Method 1: Try script tag first (most reliable)
    if (gradientDataScript) {
        const scriptContent = gradientDataScript.textContent?.trim();
        console.log('🎨 Script tag raw content:', `"${scriptContent}"`);

        if (scriptContent && scriptContent !== 'null' && scriptContent !== '' && scriptContent !== 'undefined') {
            existingGradientData = scriptContent;
            dataSource = 'script-tag';
            console.log('🎨 ✅ Using script tag data');
        }
    }

    // Method 2: Try hidden input as fallback
    if (!existingGradientData && gradientDataInput) {
        const inputValue = gradientDataInput.value?.trim();
        console.log('🎨 Hidden input raw value:', `"${inputValue}"`);

        if (inputValue && inputValue !== 'null' && inputValue !== '' && inputValue !== 'undefined') {
            existingGradientData = inputValue;
            dataSource = 'hidden-input';
            console.log('🎨 ✅ Using hidden input data');
        }
    }

    // Parse and validate the gradient data
    if (existingGradientData) {
        try {
            console.log('🎨 Parsing gradient data from', dataSource);
            console.log('🎨 Raw data to parse:', existingGradientData);

            const parsedData = JSON.parse(existingGradientData);
            console.log('🎨 Parsed data:', parsedData);

            // Validate structure
            if (parsedData && typeof parsedData === 'object') {
                // Validate stops array
                if (parsedData.stops && Array.isArray(parsedData.stops) && parsedData.stops.length >= 2) {
                    // Validate each stop
                    const validStops = parsedData.stops.filter(stop =>
                        stop &&
                        typeof stop === 'object' &&
                        typeof stop.color === 'string' &&
                        stop.color.match(/^#[0-9a-fA-F]{6}$/) &&
                        typeof stop.position === 'number' &&
                        stop.position >= 0 && stop.position <= 100
                    );

                    if (validStops.length >= 2) {
                        // Successfully validated - set the gradient data
                        gradientData = {
                            type: (parsedData.type === 'linear' || parsedData.type === 'radial') ? parsedData.type : 'linear',
                            angle: (typeof parsedData.angle === 'number' && parsedData.angle >= 0 && parsedData.angle <= 360) ? parsedData.angle : 90,
                            stops: validStops
                        };

                        window.gradientDataLoaded = true;
                        console.log('🎨 ✅ SUCCESSFULLY LOADED gradient data:', gradientData);
                        return true;
                    } else {
                        console.warn('🎨 ⚠️ Invalid color stops - not enough valid stops');
                    }
                } else {
                    console.warn('🎨 ⚠️ Invalid or missing stops array');
                }
            } else {
                console.warn('🎨 ⚠️ Invalid data structure');
            }
        } catch (error) {
            console.error('🎨 ❌ Failed to parse gradient data:', error);
            console.error('🎨 Raw data that failed:', existingGradientData);
        }
    } else {
        console.log('🎨 ℹ️ No gradient data found in any source');
    }

    // Fallback to default data
    console.log('🎨 Using default gradient data');
    gradientData = { ...defaultGradientData };
    window.gradientDataLoaded = false;
    return false;
}

function setGradientUIFromData(retryCount = 0) {
    console.log('🎨 CRITICAL: Setting gradient UI from loaded data... (attempt', retryCount + 1, ')');

    if (!gradientData) {
        console.error('🎨 ❌ No gradient data available to set UI!');
        return;
    }

    console.log('🎨 Gradient data to apply:', JSON.stringify(gradientData, null, 2));

    // Find all UI elements (don't check visibility - always update)
    const gradientEditor = document.getElementById('gradient-editor');
    const gradientTypeButtons = document.querySelectorAll('.gradient-type-btn');
    const gradientDirectionButtons = document.querySelectorAll('.gradient-direction-btn');
    const gradientPreview = document.getElementById('gradient-preview');
    const gradientCSSOutput = document.getElementById('gradient-css-output');
    const colorStopsContainer = document.getElementById('color-stops-container');

    console.log('🎨 UI Elements found:');
    console.log('   Gradient Editor:', gradientEditor ? 'FOUND' : 'NOT FOUND');
    console.log('   Type Buttons:', gradientTypeButtons.length);
    console.log('   Direction Buttons:', gradientDirectionButtons.length);
    console.log('   Preview Box:', gradientPreview ? 'FOUND' : 'NOT FOUND');
    console.log('   CSS Output:', gradientCSSOutput ? 'FOUND' : 'NOT FOUND');
    console.log('   Color Stops Container:', colorStopsContainer ? 'FOUND' : 'NOT FOUND');

    // If critical elements are missing, retry
    if (gradientTypeButtons.length === 0 || !gradientPreview) {
        if (retryCount < 10) {
            const delay = Math.min((retryCount + 1) * 200, 2000); // 200ms, 400ms, 600ms... max 2s
            console.log(`🎨 ⏳ Critical elements missing, retrying in ${delay}ms...`);
            setTimeout(() => {
                setGradientUIFromData(retryCount + 1);
            }, delay);
            return;
        } else {
            console.error('🎨 ❌ CRITICAL ERROR: Failed to find gradient UI elements after 10 retries!');
            return;
        }
    }

    // 1. Set gradient type buttons
    console.log('🎨 1️⃣ Setting gradient type buttons...');
    let typeButtonFound = false;
    gradientTypeButtons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.id === `gradient-${gradientData.type}`) {
            btn.classList.add('active');
            typeButtonFound = true;
            console.log('🎨 ✅ Set active gradient type:', btn.id);
        }
    });

    if (!typeButtonFound) {
        console.warn('🎨 ⚠️ Could not find button for gradient type:', gradientData.type);
        // Set first button as active as fallback
        if (gradientTypeButtons.length > 0) {
            gradientTypeButtons[0].classList.add('active');
            console.log('🎨 ⚠️ Set first type button as fallback');
        }
    }

    // 2. Set direction buttons and visibility for linear gradients
    console.log('🎨 2️⃣ Setting gradient direction buttons...');
    const directionSection = document.getElementById('gradient-direction-section');

    if (gradientData.type === 'linear') {
        console.log('🎨 Linear gradient - setting direction buttons for angle:', gradientData.angle);

        let directionButtonFound = false;
        gradientDirectionButtons.forEach(btn => {
            btn.classList.remove('active');
            const btnAngle = parseInt(btn.dataset.angle);
            if (btnAngle === gradientData.angle) {
                btn.classList.add('active');
                directionButtonFound = true;
                console.log('🎨 ✅ Set active gradient angle:', btnAngle);
            }
        });

        if (!directionButtonFound) {
            console.warn('🎨 ⚠️ Could not find button for angle:', gradientData.angle);
            // Set first direction button as fallback
            if (gradientDirectionButtons.length > 0) {
                gradientDirectionButtons[0].classList.add('active');
                console.log('🎨 ⚠️ Set first direction button as fallback');
            }
        }

        // Show direction section for linear gradients
        if (directionSection) {
            directionSection.style.display = 'block';
            console.log('🎨 ✅ Showed direction section for linear gradient');
        }
    } else {
        // Hide direction section for radial gradients
        if (directionSection) {
            directionSection.style.display = 'none';
            console.log('🎨 ✅ Hid direction section for radial gradient');
        }
    }

    // 3. Update color stops
    console.log('🎨 3️⃣ Initializing color stops with loaded data...');
    initializeColorStops();

    // 4. Update the gradient preview immediately
    console.log('🎨 4️⃣ Updating gradient preview with loaded data...');
    updateGradientPreview();

    console.log('🎨 ✅ COMPLETED: Gradient UI successfully updated from loaded data!');
}

function initializeGradientEditor() {
    console.log('🎨 CRITICAL: Initializing gradient editor...');

    // STEP 1: Load existing gradient data from drop FIRST
    const dataLoaded = loadExistingGradientData();
    console.log('🎨 Data loading result:', dataLoaded);

    const backgroundTypeSelect = document.getElementById('edit-background-type');
    const gradientEditor = document.getElementById('gradient-editor');

    console.log('🎨 Background type select:', backgroundTypeSelect ? backgroundTypeSelect.value : 'NOT FOUND');
    console.log('🎨 Gradient editor element:', gradientEditor ? 'FOUND' : 'NOT FOUND');

    // STEP 2: Show/hide gradient editor based on background type
    if (backgroundTypeSelect) {
        const currentBackgroundType = backgroundTypeSelect.value;
        console.log('🎨 Current background type:', currentBackgroundType);

        // Show gradient editor if background type is already gradient
        if (currentBackgroundType === 'gradient') {
            if (gradientEditor) {
                gradientEditor.style.display = 'block';
                console.log('🎨 ✅ Background type is gradient, showing gradient editor');

                // STEP 3: Update UI with loaded data immediately
                setTimeout(() => {
                    console.log('🎨 Updating UI with loaded gradient data...');
                    setGradientUIFromData(0);

                    // Update live preview
                    if (gradientData) {
                        const currentGradientCSS = generateGradientCSS();
                        updateLivePreviewGradient(currentGradientCSS);
                        console.log('🎨 ✅ Updated live preview with loaded gradient');
                    }
                }, 100);
            }
        } else {
            console.log('🎨 Background type is not gradient, hiding gradient editor');
            if (gradientEditor) {
                gradientEditor.style.display = 'none';
            }
        }

        // Handle background type changes
        backgroundTypeSelect.addEventListener('change', function() {
            console.log('🎨 Background type changed to:', this.value);
            if (this.value === 'gradient') {
                if (gradientEditor) {
                    gradientEditor.style.display = 'block';
                }

                // Ensure we have gradient data
                if (!gradientData) {
                    gradientData = { ...defaultGradientData };
                }

                // Update UI and preview
                setGradientUIFromData(0);
                updateGradientPreview();

                setTimeout(() => {
                    const currentGradientCSS = generateGradientCSS();
                    updateLivePreviewGradient(currentGradientCSS);
                }, 100);
            } else {
                if (gradientEditor) {
                    gradientEditor.style.display = 'none';
                }

                // Update live preview to show solid color instead
                const backgroundColorInput = document.getElementById('edit-background-color');
                if (backgroundColorInput && backgroundColorInput.value) {
                    updateLivePreviewGradient(backgroundColorInput.value);
                }
            }
        });
    }

    // Initialize gradient type buttons
    const gradientTypeButtons = document.querySelectorAll('.gradient-type-btn');
    console.log('🎨 Found gradient type buttons:', gradientTypeButtons.length);
    gradientTypeButtons.forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('🎨 Gradient type clicked:', this.id);
            gradientTypeButtons.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            gradientData.type = this.id.replace('gradient-', '');

            const directionSection = document.getElementById('gradient-direction-section');
            if (gradientData.type === 'linear') {
                directionSection.style.display = 'block';
            } else {
                directionSection.style.display = 'none';
            }

            updateGradientPreview();
        });
    });

    // Initialize direction buttons
    const directionButtons = document.querySelectorAll('.gradient-direction-btn');
    console.log('🎨 Found direction buttons:', directionButtons.length);
    directionButtons.forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('🎨 Direction clicked:', this.dataset.angle);
            directionButtons.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            gradientData.angle = parseInt(this.dataset.angle);
            updateGradientPreview();
        });
    });

    // Initialize preset buttons
    const presetButtons = document.querySelectorAll('.gradient-preset');
    console.log('🎨 Found preset buttons:', presetButtons.length);
    presetButtons.forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('🎨 Preset clicked:', this.dataset.gradient);
            const gradientCSS = this.dataset.gradient;
            parseGradientFromCSS(gradientCSS);
            updateGradientPreview();
            initializeColorStops();
        });
    });

    // Initialize add/remove color stop buttons
    const addStopBtn = document.getElementById('add-color-stop');
    const removeStopBtn = document.getElementById('remove-color-stop');

    if (addStopBtn) {
        addStopBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('🎨 Adding color stop');
            addColorStop();
        });
    }

    if (removeStopBtn) {
        removeStopBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('🎨 Removing color stop');
            removeColorStop();
        });
    }

    // Initialize copy CSS button
    const copyCSSBtn = document.getElementById('copy-gradient-css');
    if (copyCSSBtn) {
        copyCSSBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('🎨 Copying CSS');
            copyGradientCSS();
        });
    }

    // STEP 4: Initialize color stops and preview
    console.log('🎨 STEP 4: Initializing color stops and preview...');

    // Ensure we have gradient data
    if (!gradientData) {
        console.log('🎨 No gradient data available, using defaults');
        gradientData = { ...defaultGradientData };
        window.gradientDataLoaded = false;
    }

    // Always initialize color stops and preview
    initializeColorStops();
    updateGradientPreview();

    console.log('🎨 ✅ Gradient editor initialized successfully');
    console.log('🎨 Final gradient data:', gradientData);
    console.log('🎨 Data loaded flag:', window.gradientDataLoaded);

    // STEP 5: Final UI update to ensure everything is synced
    setTimeout(() => {
        console.log('🎨 FINAL: Ensuring UI is synced with gradient data...');
        setGradientUIFromData(0);
    }, 500);
}

function initializeColorStops() {
    const container = document.getElementById('color-stops-container');
    if (!container) {
        console.warn('🎨 Color stops container not found');
        return;
    }

    // Ensure we have gradient data
    if (!gradientData) {
        console.warn('🎨 No gradient data available for color stops');
        gradientData = { ...defaultGradientData };
    }

    console.log('🎨 Initializing color stops with data:', gradientData.stops);
    container.innerHTML = '';

    if (gradientData.stops && Array.isArray(gradientData.stops)) {
        gradientData.stops.forEach((stop, index) => {
            const stopElement = createColorStopElement(stop, index);
            container.appendChild(stopElement);
        });
        console.log('🎨 ✅ Color stops initialized:', gradientData.stops.length, 'stops');
    } else {
        console.error('🎨 ❌ Invalid gradient stops data');
    }
}

function createColorStopElement(stop, index) {
    const div = document.createElement('div');
    div.className = 'color-stop-item';
    div.innerHTML = `
        <input type="color" class="color-stop-color" value="${stop.color}" data-index="${index}">
        <input type="number" class="color-stop-position" value="${stop.position}" min="0" max="100" data-index="${index}">
        <span class="text-xs text-gray-500">%</span>
    `;

    // Add event listeners
    const colorInput = div.querySelector('.color-stop-color');
    const positionInput = div.querySelector('.color-stop-position');

    colorInput.addEventListener('input', function() {
        gradientData.stops[index].color = this.value;
        console.log('🎨 Color stop color changed:', index, this.value);
        updateGradientPreview();
    });

    positionInput.addEventListener('input', function() {
        gradientData.stops[index].position = parseInt(this.value);
        console.log('🎨 Color stop position changed:', index, this.value);
        updateGradientPreview();
    });

    return div;
}

function addColorStop() {
    if (gradientData.stops.length >= 4) return;

    const newPosition = gradientData.stops.length > 0 ?
        Math.min(100, Math.max(...gradientData.stops.map(s => s.position)) + 25) : 50;

    gradientData.stops.push({
        color: '#ffffff',
        position: newPosition
    });

    initializeColorStops();
    updateGradientPreview();
}

function removeColorStop() {
    if (gradientData.stops.length <= 2) return;

    gradientData.stops.pop();
    initializeColorStops();
    updateGradientPreview();
}

function updateGradientPreview() {
    console.log('🎨 updateGradientPreview() called');

    // Ensure we have gradient data
    if (!gradientData) {
        console.warn('🎨 No gradient data available for preview');
        gradientData = { ...defaultGradientData };
    }

    const preview = document.getElementById('gradient-preview');
    const cssOutput = document.getElementById('gradient-css-output');

    if (!preview) {
        console.warn('🎨 Gradient preview element not found');
        return;
    }

    const gradientCSS = generateGradientCSS();
    console.log('🎨 Generated gradient CSS:', gradientCSS);
    console.log('🎨 Current gradient data:', JSON.stringify(gradientData, null, 2));

    // Update the preview box
    preview.style.background = gradientCSS;
    console.log('🎨 ✅ Updated gradient preview box with CSS:', gradientCSS);

    // Update CSS output display
    if (cssOutput) {
        cssOutput.value = gradientCSS;
        console.log('🎨 ✅ Updated CSS output display');
    } else {
        console.warn('🎨 CSS output element not found');
    }

    // Update hidden input for form submission - CRITICAL FIX
    const hiddenInput = document.getElementById('gradient-data');
    if (hiddenInput) {
        const gradientDataString = JSON.stringify(gradientData);
        hiddenInput.value = gradientDataString;
        console.log('🎨 Updated hidden input with gradient data:', gradientDataString);

        // Force trigger change event to ensure form recognizes the update
        hiddenInput.dispatchEvent(new Event('change', { bubbles: true }));
    } else {
        console.error('🎨 Hidden gradient-data input not found!');
    }

    // Update background color input to match first color stop
    const backgroundColorInput = document.getElementById('edit-background-color');
    if (backgroundColorInput && gradientData.stops.length > 0) {
        backgroundColorInput.value = gradientData.stops[0].color;
        // Trigger change event for background color input too
        backgroundColorInput.dispatchEvent(new Event('change', { bubbles: true }));
    }

    // Update the live preview iframe if available
    updateLivePreviewGradient(gradientCSS);
}

function generateGradientCSS() {
    // Ensure we have gradient data
    if (!gradientData) {
        console.warn('🎨 No gradient data available for CSS generation');
        gradientData = { ...defaultGradientData };
    }

    if (!gradientData.stops || !Array.isArray(gradientData.stops) || gradientData.stops.length < 2) {
        console.warn('🎨 Invalid gradient stops, using defaults');
        gradientData.stops = defaultGradientData.stops;
    }

    const sortedStops = [...gradientData.stops].sort((a, b) => a.position - b.position);
    const stopsCSS = sortedStops.map(stop => `${stop.color} ${stop.position}%`).join(', ');

    if (gradientData.type === 'linear') {
        return `linear-gradient(${gradientData.angle}deg, ${stopsCSS})`;
    } else {
        return `radial-gradient(circle, ${stopsCSS})`;
    }
}

function parseGradientFromCSS(css) {
    // Simple parser for preset gradients
    const match = css.match(/linear-gradient\((\d+)deg,\s*(.+)\)/);
    if (match) {
        gradientData.type = 'linear';
        gradientData.angle = parseInt(match[1]);

        const stopsStr = match[2];
        const stops = stopsStr.split(',').map((stop, index) => {
            const colorMatch = stop.trim().match(/^(#[0-9a-fA-F]{6})/);
            return {
                color: colorMatch ? colorMatch[1] : '#ffffff',
                position: index * (100 / (stopsStr.split(',').length - 1))
            };
        });

        gradientData.stops = stops;
    }
}

function copyGradientCSS() {
    const cssOutput = document.getElementById('gradient-css-output');
    if (cssOutput) {
        cssOutput.select();
        document.execCommand('copy');

        // Show feedback
        const btn = document.getElementById('copy-gradient-css');
        const originalText = btn.textContent;
        btn.textContent = 'Copied!';
        setTimeout(() => {
            btn.textContent = originalText;
        }, 1000);
    }
}

function updateLivePreviewGradient(gradientCSS) {
    try {
        const iframe = document.getElementById('preview-iframe');
        if (!iframe || !iframe.contentWindow) {
            console.log('🎨 Preview iframe not accessible, will refresh instead');
            setTimeout(() => {
                refreshPreview();
            }, 500);
            return;
        }

        // Use postMessage to communicate with iframe (cross-origin safe)
        const message = {
            type: 'UPDATE_GRADIENT',
            gradientCSS: gradientCSS,
            timestamp: Date.now()
        };

        console.log('🎨 Sending gradient update to iframe:', message);
        iframe.contentWindow.postMessage(message, '*');

        // Fallback: If no response after 2 seconds, refresh the iframe
        setTimeout(() => {
            if (!window.lastGradientUpdateConfirmed ||
                (Date.now() - window.lastGradientUpdateConfirmed) > 2000) {
                console.log('🎨 No gradient update confirmation received, refreshing iframe');
                refreshPreview();
            }
        }, 2000);

    } catch (error) {
        console.warn('🎨 Could not update live preview gradient:', error.message);
        // Fallback: refresh the preview iframe
        setTimeout(() => {
            refreshPreview();
        }, 500);
    }
}

function initializeFormSubmission() {
    const form = document.getElementById('drop-edit-form');
    const saveBtn = document.getElementById('save-btn');
    const saveBtnText = document.getElementById('save-btn-text');
    const saveBtnSpinner = document.getElementById('save-btn-spinner');

    form.addEventListener('submit', async function(e) {
        e.preventDefault();

        console.log('🚀 FORM SUBMISSION TRIGGERED');
        console.log('='.repeat(50));

        // Show loading state
        saveBtn.disabled = true;
        saveBtnText.textContent = 'Saving...';
        saveBtnSpinner.classList.remove('hidden');

        // Show immediate feedback
        showToast('🔄 Saving changes...', 'info', 2000);

        try {
            console.log('🚀 Starting form submission...');

            const formData = new FormData(form);
            const data = Object.fromEntries(formData);

            // Convert checkboxes to booleans
            data.is_active = formData.has('is_active');
            data.collect_email = formData.has('collect_email');
            data.collect_phone = formData.has('collect_phone');
            data.show_on_homepage = formData.has('show_on_homepage');

            // CRITICAL FIX: Ensure gradient data is captured
            const gradientDataInput = document.getElementById('gradient-data');
            if (gradientDataInput && gradientDataInput.value) {
                data.gradient_data = gradientDataInput.value;
                console.log('🎨 Captured gradient data for submission:', data.gradient_data);
            } else if (data.background_type === 'gradient') {
                // If background type is gradient but no gradient data, use current gradientData
                data.gradient_data = JSON.stringify(gradientData);
                console.log('🎨 Using current gradientData for submission:', data.gradient_data);
            }

            // Enhanced debugging: Log comprehensive form data
            console.log('🔍 FORM SUBMISSION DEBUG');
            console.log('='.repeat(50));
            console.log('📋 Complete form data:', data);
            console.log('📊 Form data count:', Object.keys(data).length, 'fields');

            // Verify styling fields specifically
            const stylingFields = {
                background_type: data.background_type,
                card_background_type: data.card_background_type,
                background_color: data.background_color,
                overscroll_background_color: data.overscroll_background_color,
                button_color: data.button_color,
                button_text_color: data.button_text_color,
                title_color: data.title_color,
                description_color: data.description_color,
                rsvp_title: data.rsvp_title,
                gradient_data: data.gradient_data
            };

            console.log('🎨 Styling fields verification:');
            Object.entries(stylingFields).forEach(([key, value]) => {
                const status = value ? '✅' : '❌';
                console.log(`   ${status} ${key}: ${value || 'MISSING'}`);
            });

            // Check for missing required styling fields
            const missingStylingFields = Object.entries(stylingFields)
                .filter(([key, value]) => !value)
                .map(([key]) => key);

            if (missingStylingFields.length > 0) {
                console.warn('⚠️ Missing styling fields:', missingStylingFields);
            }

            // Validate data before sending
            if (!data.title || !data.slug) {
                throw new Error('Title and slug are required');
            }

            console.log('📡 Sending API request...');
            console.log('🌐 URL:', `/api/drops/{{drop.id}}`);
            console.log('📦 Payload size:', JSON.stringify(data).length, 'bytes');

            const response = await fetch(`/api/drops/{{drop.id}}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    // Note: Authentication should be handled automatically via cookies
                },
                credentials: 'same-origin', // Ensure cookies are sent
                body: JSON.stringify(data)
            });

            console.log('📡 Response received:', {
                status: response.status,
                statusText: response.statusText,
                ok: response.ok,
                headers: Object.fromEntries(response.headers.entries())
            });

            if (response.ok) {
                const result = await response.json();
                console.log('✅ DROP UPDATE SUCCESS');
                console.log('='.repeat(30));
                console.log('📊 Server response:', result);

                if (result.data) {
                    console.log('🎨 Updated styling data:', {
                        background_type: result.data.background_type,
                        card_background_type: result.data.card_background_type,
                        background_color: result.data.background_color,
                        button_text_color: result.data.button_text_color
                    });
                }

                showToast('✅ Drop styling updated successfully!', 'success');

                // Refresh preview after a short delay
                setTimeout(() => {
                    console.log('🔄 Refreshing preview...');
                    refreshPreview();
                }, 1000);

            } else {
                console.error('❌ DROP UPDATE FAILED');
                console.error('='.repeat(30));
                console.error('📊 Response status:', response.status, response.statusText);

                const errorText = await response.text();
                console.error('📄 Error response body:', errorText);

                let errorMessage = 'Failed to update drop';

                try {
                    const error = JSON.parse(errorText);
                    errorMessage = error.message || error.error || errorMessage;
                    console.error('🚨 Parsed error:', error);
                } catch (parseError) {
                    console.error('🚨 Could not parse error response:', parseError);
                    errorMessage = `${errorMessage} (${response.status}: ${response.statusText})`;
                }

                // Show specific error messages for common issues
                if (response.status === 401) {
                    errorMessage = 'Authentication failed. Please refresh the page and try again.';
                } else if (response.status === 403) {
                    errorMessage = 'You do not have permission to edit this drop.';
                } else if (response.status === 404) {
                    errorMessage = 'Drop not found. It may have been deleted.';
                } else if (response.status >= 500) {
                    errorMessage = 'Server error. Please try again later.';
                }

                showToast(`❌ ${errorMessage}`, 'error');
            }
        } catch (error) {
            console.error('🚨 FORM SUBMISSION ERROR');
            console.error('='.repeat(30));
            console.error('🚨 Error details:', error);
            console.error('🚨 Error stack:', error.stack);

            let errorMessage = 'Network error. Please check your connection and try again.';

            if (error.name === 'TypeError' && error.message.includes('fetch')) {
                errorMessage = 'Could not connect to server. Please check your internet connection.';
            } else if (error.message) {
                errorMessage = error.message;
            }

            showToast(`🚨 ${errorMessage}`, 'error');
        } finally {
            // Reset button state
            saveBtn.disabled = false;
            saveBtnText.textContent = 'Save Changes';
            saveBtnSpinner.classList.add('hidden');

            console.log('🔄 Form submission completed (finally block)');
        }
    });

    // Add global error handler for debugging
    window.addEventListener('error', function(e) {
        console.error('🚨 GLOBAL ERROR:', e.error);
        console.error('🚨 Error details:', {
            message: e.message,
            filename: e.filename,
            lineno: e.lineno,
            colno: e.colno
        });
    });

    // Add unhandled promise rejection handler
    window.addEventListener('unhandledrejection', function(e) {
        console.error('🚨 UNHANDLED PROMISE REJECTION:', e.reason);
        console.error('🚨 Promise:', e.promise);
    });

    // Add postMessage listener for iframe communication
    window.addEventListener('message', function(event) {
        // Accept messages from any origin for iframe communication
        if (event.data && event.data.type === 'GRADIENT_UPDATE_CONFIRMED') {
            console.log('🎨 Gradient update confirmed by iframe:', event.data);
            window.lastGradientUpdateConfirmed = Date.now();
        }
    });
}

function showToast(message, type = 'info', duration = 5000) {
    console.log(`🍞 Toast: ${type.toUpperCase()} - ${message}`);

    // Remove any existing toasts
    const existingToasts = document.querySelectorAll('.toast-notification');
    existingToasts.forEach(toast => toast.remove());

    const toast = document.createElement('div');
    toast.className = `toast-notification fixed top-4 right-4 px-6 py-4 rounded-lg shadow-xl z-50 max-w-md transition-all duration-300 transform translate-x-full`;

    // Style based on type
    if (type === 'success') {
        toast.className += ' bg-green-500 text-white border-l-4 border-green-600';
        toast.innerHTML = `
            <div class="flex items-center">
                <svg class="w-5 h-5 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                </svg>
                <span class="font-medium">${message}</span>
            </div>
        `;
    } else if (type === 'error') {
        toast.className += ' bg-red-500 text-white border-l-4 border-red-600';
        toast.innerHTML = `
            <div class="flex items-center">
                <svg class="w-5 h-5 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                </svg>
                <span class="font-medium">${message}</span>
            </div>
        `;
    } else {
        toast.className += ' bg-blue-500 text-white border-l-4 border-blue-600';
        toast.innerHTML = `
            <div class="flex items-center">
                <svg class="w-5 h-5 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
                </svg>
                <span class="font-medium">${message}</span>
            </div>
        `;
    }

    document.body.appendChild(toast);

    // Animate in
    setTimeout(() => {
        toast.classList.remove('translate-x-full');
        toast.classList.add('translate-x-0');
    }, 100);

    // Auto-remove after duration
    setTimeout(() => {
        if (document.body.contains(toast)) {
            toast.classList.add('translate-x-full');
            setTimeout(() => {
                if (document.body.contains(toast)) {
                    document.body.removeChild(toast);
                }
            }, 300);
        }
    }, duration);
}

function initializeDebugTest() {
    const debugBtn = document.getElementById('debug-test-btn');
    if (!debugBtn) return;

    debugBtn.addEventListener('click', async function() {
        console.log('🔧 MANUAL DEBUG TEST STARTED');
        console.log('='.repeat(50));

        try {
            // Test 1: Check current form data
            console.log('1️⃣ Checking current form data...');

            const form = document.getElementById('drop-edit-form');
            if (form) {
                const formData = new FormData(form);
                const currentData = Object.fromEntries(formData);
                console.log('📋 Current form data:', currentData);

                // Check specific styling fields
                const stylingFields = ['background_type', 'card_background_type', 'background_color', 'overscroll_background_color', 'button_text_color', 'rsvp_title', 'gradient_data'];
                stylingFields.forEach(field => {
                    const element = form.querySelector(`[name="${field}"]`);
                    if (element) {
                        console.log(`✅ ${field}: "${element.value}" (element found)`);
                    } else {
                        console.error(`❌ ${field}: element not found!`);
                    }
                });
            }

            // Test 1.5: Gradient data debug
            console.log('1️⃣.5️⃣ Checking gradient data specifically...');
            const gradientDebugResult = window.debugGradientData();
            console.log('🎨 Gradient debug result:', gradientDebugResult);

            // Force reload gradient data
            console.log('🔄 Force reloading gradient data...');
            const reloadSuccess = loadExistingGradientData();
            console.log('🔄 Reload success:', reloadSuccess);

            // Force UI update if data was loaded
            if (window.gradientDataLoaded) {
                console.log('🖼️ Force updating gradient UI...');
                setGradientUIFromData(0);
            }

            // Test 2: Simple API connectivity test
            console.log('2️⃣ Testing API connectivity...');

            const testData = {
                background_color: '#00FF00', // Bright green to make it obvious
                background_type: 'solid',
                card_background_type: 'solid_white',
                button_color: '#FF0000',
                button_text_color: '#FFFFFF'
            };

            console.log('📤 Sending test data:', testData);

            const response = await fetch(`/api/drops/{{drop.id}}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                credentials: 'same-origin',
                body: JSON.stringify(testData)
            });

            console.log('📡 Response status:', response.status);
            console.log('📡 Response headers:', Object.fromEntries(response.headers.entries()));

            if (response.ok) {
                const result = await response.json();
                console.log('✅ SUCCESS! API response:', result);
                showToast('🔧 Debug test successful! Check if background changed to green.', 'success');

                // Force refresh the preview
                setTimeout(() => {
                    refreshPreview();
                }, 1000);

            } else {
                const errorText = await response.text();
                console.error('❌ API Error:', errorText);
                showToast(`🔧 Debug test failed: ${response.status} ${response.statusText}`, 'error');
            }

        } catch (error) {
            console.error('🚨 Debug test error:', error);
            showToast(`🔧 Debug test error: ${error.message}`, 'error');
        }
    });
}

async function loadAnalytics() {
    try {
        const response = await fetch(`/api/drops/{{drop.id}}/analytics`);
        if (response.ok) {
            const result = await response.json();
            const data = result.data;

            // Update analytics display
            document.getElementById('analytics-views').textContent = data.views || 0;
            document.getElementById('analytics-fans').textContent = data.fans || 0;
            document.getElementById('analytics-conversion').textContent = `${data.conversionRate || 0}%`;

            // Update recent signups
            const signupsContainer = document.getElementById('recent-signups');
            if (data.recentSignups && data.recentSignups.length > 0) {
                signupsContainer.innerHTML = data.recentSignups.map(signup => `
                    <div class="flex items-center justify-between py-2">
                        <span class="text-sm text-gray-900">${signup.email || signup.phone || 'Anonymous'}</span>
                        <span class="text-xs text-gray-500">${new Date(signup.created_at).toLocaleDateString()}</span>
                    </div>
                `).join('');
            } else {
                signupsContainer.innerHTML = '<p class="text-sm text-gray-500">No signups yet</p>';
            }
        }
    } catch (error) {
        console.error('Failed to load analytics:', error);
    }
}
</script>

<style>
/* Home Editor Styling Patterns for Drop Edit Page */

/* Override admin form styles for modern dashboard integration */
.home-settings-form {
    max-width: none;
}

.home-settings-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
}

.form-section {
    background: #f9fafb;
    border-radius: 0.75rem;
    padding: 1.5rem;
    border: 1px solid #e5e7eb;
}

.form-section h4 {
    margin: 0 0 1.5rem 0;
    font-size: 1.125rem;
    font-weight: 600;
    color: #1f2937;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group:last-child {
    margin-bottom: 0;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    color: #374151;
}

.form-input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    transition: all 0.2s ease;
    background: white;
}

.form-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.form-help {
    display: block;
    margin-top: 0.25rem;
    font-size: 0.75rem;
    color: #6b7280;
    line-height: 1.4;
}

.error {
    color: #dc2626;
    font-size: 0.75rem;
    margin-top: 0.25rem;
}

/* Slug input wrapper */
.slug-input-wrapper {
    display: flex;
    border-radius: 0.5rem;
    overflow: hidden;
    border: 1px solid #d1d5db;
    transition: all 0.2s ease;
}

.slug-input-wrapper:focus-within {
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.slug-prefix {
    display: flex;
    align-items: center;
    padding: 0.75rem;
    background: #f3f4f6;
    border-right: 1px solid #d1d5db;
    font-size: 0.875rem;
    color: #6b7280;
    white-space: nowrap;
}

.slug-input-wrapper .form-input {
    border: none;
    border-radius: 0;
    margin: 0;
}

.slug-input-wrapper .form-input:focus {
    box-shadow: none;
}

/* Checkbox styling */
.checkbox-label {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    cursor: pointer;
}

.checkbox-input {
    width: 1rem;
    height: 1rem;
    margin: 0;
    flex-shrink: 0;
    margin-top: 0.125rem;
}

.checkbox-text {
    font-size: 0.875rem;
    font-weight: 500;
    color: #374151;
}

/* Button styling */
.btn-primary {
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    color: white;
    border: none;
    padding: 0.75rem 2rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
}

.form-actions {
    text-align: center;
    padding: 1.5rem 0 0 0;
    border-top: 1px solid #e5e7eb;
    margin-top: 2rem;
}

.success-message {
    background: #d1fae5;
    color: #065f46;
    border: 1px solid #a7f3d0;
    border-radius: 0.5rem;
    padding: 1rem;
    margin: 1rem 0;
}

.error-message {
    background: #fee2e2;
    color: #991b1b;
    border: 1px solid #fecaca;
    border-radius: 0.5rem;
    padding: 1rem;
    margin: 1rem 0;
}

/* File input styling for color pickers */
.file-input {
    padding: 0.5rem 0.75rem;
    cursor: pointer;
    height: 3rem;
}

.file-input::-webkit-file-upload-button {
    background: #3b82f6;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    cursor: pointer;
    margin-right: 0.75rem;
    font-size: 0.75rem;
    font-weight: 500;
}

.file-input::-webkit-file-upload-button:hover {
    background: #2563eb;
}

/* Mobile responsive */
@media (max-width: 768px) {
    .home-settings-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }

    .form-section {
        padding: 1.25rem;
    }

    .form-actions {
        padding: 20px 0;
    }
}

/* Form response area */
#drop-edit-response {
    margin-top: 1.25rem;
}

/* Animation for form submission */
@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

.form-submitting .btn-primary {
    animation: pulse 1s infinite;
}

/* Focus management */
.form-input:focus-visible {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
}

/* High contrast mode support */
@media (prefers-contrast: high) {
    .form-input {
        border-width: 3px;
    }

    .btn-primary {
        background: #000;
        border: 2px solid #fff;
    }
}
</style>

<style>
.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.preview-mode-btn.active {
    background-color: rgb(239 246 255);
    color: rgb(37 99 235);
    border-color: rgb(147 197 253);
}

/* Mobile preview styling */
#preview-container {
    transition: all 0.3s ease;
}

/* Enhanced Modern Color Picker Design */
.modern-color-input {
    width: 100% !important;
    height: 48px !important;
    padding: 0 !important;
    border: 2px solid #e5e7eb !important;
    border-radius: 12px !important;
    cursor: pointer !important;
    background: white !important;
    transition: all 0.2s ease !important;
    -webkit-appearance: none !important;
    -moz-appearance: none !important;
    appearance: none !important;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1), inset 0 1px 0 rgba(255, 255, 255, 0.1) !important;
    position: relative !important;
    overflow: hidden !important;
}

.modern-color-input:hover {
    border-color: #3b82f6 !important;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15), inset 0 1px 0 rgba(255, 255, 255, 0.1) !important;
    transform: translateY(-1px) !important;
}

.modern-color-input:focus {
    outline: none !important;
    border-color: #3b82f6 !important;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1), 0 4px 8px rgba(0, 0, 0, 0.15) !important;
}

.modern-color-input::-webkit-color-swatch-wrapper {
    padding: 0 !important;
    border: none !important;
    border-radius: 10px !important;
}

.modern-color-input::-webkit-color-swatch {
    border: none !important;
    border-radius: 10px !important;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1) !important;
}

.modern-color-input::-moz-color-swatch {
    border: none !important;
    border-radius: 10px !important;
}

/* Form styling improvements */
.drop-form input:focus,
.drop-form textarea:focus,
.drop-form select:focus {
    outline: none !important;
    border-color: #3b82f6 !important;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1) !important;
}

/* Enhanced preview iframe styling */
#preview-iframe {
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    background: white;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

/* Advanced Gradient Editor Styling */
.gradient-type-btn {
    background: white;
    border-color: #d1d5db;
    color: #6b7280;
    transition: all 0.2s ease;
}

.gradient-type-btn.active {
    background: #3b82f6;
    border-color: #3b82f6;
    color: white;
}

.gradient-direction-btn {
    background: white;
    border-color: #d1d5db;
    color: #6b7280;
    transition: all 0.2s ease;
}

.gradient-direction-btn.active {
    background: #3b82f6;
    border-color: #3b82f6;
    color: white;
}

.gradient-direction-btn:hover {
    border-color: #3b82f6;
    color: #3b82f6;
}

.gradient-preset {
    transition: all 0.2s ease;
    cursor: pointer;
}

.gradient-preset:hover {
    transform: scale(1.05);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}

.color-stop-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 4px;
    border: 1px solid #e5e7eb;
    border-radius: 4px;
    background: white;
}

.color-stop-color {
    width: 24px;
    height: 24px;
    border: 1px solid #d1d5db;
    border-radius: 4px;
    cursor: pointer;
}

.color-stop-position {
    flex: 1;
    padding: 2px 6px;
    border: 1px solid #d1d5db;
    border-radius: 3px;
    font-size: 11px;
}

.color-stop-remove {
    padding: 2px 6px;
    background: #fee2e2;
    color: #dc2626;
    border: 1px solid #fecaca;
    border-radius: 3px;
    font-size: 10px;
    cursor: pointer;
}

.color-stop-remove:hover {
    background: #fecaca;
}

/* Responsive grid improvements */
@media (max-width: 640px) {
    .grid.grid-cols-1.sm\\:grid-cols-3 {
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }

    .modern-color-input {
        height: 40px !important;
    }
}

/* Loading state styling */
.animate-spin {
    animation: spin 1s linear infinite;
}

@keyframes spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

/* Toast notification styling */
.toast-notification {
    animation: slideInRight 0.3s ease-out;
}

@keyframes slideInRight {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}
</style>